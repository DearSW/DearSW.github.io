[{"title":"高性能网站建设指南（读书笔记）","url":"http://yoursite.com/2017/05/19/高性能网站建设指南读书笔记/","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>我的Web职业生涯中的大部分时间都是担任后端工程师。因此，我一直很忠实地实现性能设计、进行正规的后端优化——编译器选项、数据库索引和内存管理等。</li>\n<li>性能黄金法则：<code>只有10% - 20%的最终用户响应时间花在了下载HTML文档上，其余的80% - 90%时间花在了下载页面中的所有组件上。</code></li>\n<li>14个性能规则，按照优先级来各个说明<ul>\n<li>减少HTTP请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"规则一-减少HTTP请求\"><a href=\"#规则一-减少HTTP请求\" class=\"headerlink\" title=\"规则一 减少HTTP请求\"></a>规则一 减少HTTP请求</h3><ul>\n<li>改善响应时间的最简单途径就是减少HTTP请求数量。</li>\n<li>减少了HTTP请求数量，但是又不能影响产品设计，那么就需要知道如下几种技术，思想都是九九归一（归并）。<ul>\n<li>CSS Sprites</li>\n<li>内联图片</li>\n<li>JavaScript、CSS的合并</li>\n</ul>\n</li>\n</ul>\n","categories":["前端"],"tags":["网站性能"]},{"title":"Electron跨平台桌面App开发（学习笔记）","url":"http://yoursite.com/2017/05/19/Electron跨平台桌面App开发/","content":"<ul>\n<li>官方简介：<code>Build cross platform desktop apps with JavaScript,HTML,and CSS</code></li>\n<li>前端统一化的大趋势</li>\n<li><p>为什么能用Electron开发桌面APP？</p>\n<ul>\n<li>Electron内嵌Chromium 和 Node.js，所以你可以用HTML、CSS和JavaScript编译应用。</li>\n</ul>\n</li>\n<li><p>怎么快速开始？</p>\n<ul>\n<li>官方下载一个名叫<code>Electron API Demos</code>的桌面app，里面展示了最简单，最基本的构建demo，助你快速了解开发。</li>\n<li><a href=\"https://electron.atom.io/\" target=\"_blank\" rel=\"external\">官方地址</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"http://hao.jobbole.com/electron/?utm_source=web.jobbole.com&amp;utm_medium=sidebar-resources\" target=\"_blank\" rel=\"external\">Electron</a></li>\n</ul>\n","categories":["前端"],"tags":["Electron","桌面App开发"]},{"title":"前后端分离思考（学习笔记）","url":"http://yoursite.com/2017/05/17/前后端分离的思考/","content":"<h3 id=\"项目划分\"><a href=\"#项目划分\" class=\"headerlink\" title=\"项目划分\"></a>项目划分</h3><ul>\n<li>应用、管控类的Web项目</li>\n<li>偏展示类的Web项目</li>\n</ul>\n<h3 id=\"应用、管控类Web项目\"><a href=\"#应用、管控类Web项目\" class=\"headerlink\" title=\"应用、管控类Web项目\"></a>应用、管控类Web项目</h3><ul>\n<li>前后端是天然分离的</li>\n<li>后端数据服务化，走统一的接口规范输出，甚至是统一走一层后端的服务输出接口，降低前后端接口定义的沟通成本，对前端来说，后端是一个巨大的数据源。而这部分接口的规范是需要前后端在很多方面达成一致才能落地的。</li>\n<li>前端页面组件化，目前已经看到一些业务中，前端编写组件和调用规范，然后把文档扔给后端，直接由后端来编写html，js来接入数据，组合页面。</li>\n</ul>\n<img src=\"/2017/05/17/前后端分离的思考/1.png\" alt=\"1.png\" title=\"\">\n<h3 id=\"偏展示类的Web项目-比较复杂\"><a href=\"#偏展示类的Web项目-比较复杂\" class=\"headerlink\" title=\"偏展示类的Web项目(比较复杂)\"></a>偏展示类的Web项目(比较复杂)</h3><ul>\n<li>问题一，模板的控制权在谁手里？<ul>\n<li>模板应当由前端人员去控制，主要原因有两方面：<ul>\n<li>性能优化（尤其是外部资源的管理与发布，请求合并等等）</li>\n<li>协作的顺畅性（已形成模板的界面片段的返工等问题）    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>问题二，模板到底应该在什么地方跟数据结合？</li>\n</ul>\n<h3 id=\"Web-前后端分离的意义大吗？\"><a href=\"#Web-前后端分离的意义大吗？\" class=\"headerlink\" title=\"Web 前后端分离的意义大吗？\"></a>Web 前后端分离的意义大吗？</h3><ol>\n<li>该网站前端变化远比后端变化频繁，则意义大。</li>\n<li>该网站尚处于原始开发模式，数据逻辑与表现逻辑混杂不清，则意义大。</li>\n<li>该网站前端团队和后端团队分属两个领导班子，技能点差异很大，则意义大。</li>\n<li>该网站前端效果绚丽/跨设备兼容要求高，则意义大。</li>\n</ol>\n","categories":["前端"],"tags":["前后端分离"]},{"title":"渐进式的感悟","url":"http://yoursite.com/2017/05/14/随笔/","content":"<h3 id=\"面向生活\"><a href=\"#面向生活\" class=\"headerlink\" title=\"面向生活\"></a>面向生活</h3><p>曾经在林清玄先生的书中看到这样一个故事：  </p>\n<ul>\n<li>老僧三十年前未参禅时，见山是山，见水是水。及至后来，亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。</li>\n</ul>\n<blockquote>\n<p>以前，觉得生活应该是幸福的，每个人都应该努力追求幸福，但却并不怎么感到幸福。</p>\n<p>后来，觉得生活应该是苦难的，面对苦难，享受苦难，却渐渐感觉到了幸福。</p>\n<p>现在，感觉到生活既不是幸福的也不是苦难的，一切都是我执，诸事随心，枯荣随缘。</p>\n<p>突然想起，胡大雨给我的留过的一段话：</p>\n<blockquote>\n<p>在这个世界上既没有幸福也没有不幸，只有一种处境和另一处境的比较。唯有经历过最大厄运磨难的人，才懂得感受最大的乐趣。必须想到过死的痛苦，才能感受生的快乐。所以，你们幸福的活下去吧，我亲爱的孩子们，永远不要忘记，在上帝垂顾为人类揭开未来之前，人类的全部智慧都包含在这两个词语中:这就是等待和希望。</p>\n</blockquote>\n</blockquote>\n","categories":["随笔"],"tags":["随笔"]},{"title":"jQuery ajax 返回parsererror错误","url":"http://yoursite.com/2017/05/13/Ajax-返回错误/","content":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><ul>\n<li><p>最近在做项目时，使用Ajax请求时，明明请求成功了，但是总是执行error方法，很是奇怪。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">                    url: &apos;addnewcommodity&apos;,</div><div class=\"line\">                    type: &apos;POST&apos;,</div><div class=\"line\">                    data: formdata,</div><div class=\"line\">                    dataType: &apos;json&apos;,</div><div class=\"line\">                    cache: false,</div><div class=\"line\">                    contentType: false,</div><div class=\"line\">                    processData: false,</div><div class=\"line\">                    success: function(data, textStatus, xhr) &#123; </div><div class=\"line\"></div><div class=\"line\">                          console.log(data);</div><div class=\"line\"></div><div class=\"line\">                          if(data) &#123;</div><div class=\"line\"></div><div class=\"line\">                              $(&apos;#message&apos;).modal(&apos;show&apos;);</div><div class=\"line\"></div><div class=\"line\">                          &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">                              $(&apos;#message2&apos;).modal(&apos;show&apos;);</div><div class=\"line\">                          &#125;</div><div class=\"line\"></div><div class=\"line\">                    &#125;, </div><div class=\"line\">                    error: function(xhr,textStatus) &#123; </div><div class=\"line\"></div><div class=\"line\">                          console.log(xhr);</div><div class=\"line\">                          console.log(textStatus); </div><div class=\"line\">                          alert(&quot;添加新商品出错&quot;);  </div><div class=\"line\">                    &#125;</div><div class=\"line\">               &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>后来查看了浏览器控制台，发现如下，返回的并不是JSON格式的数据。所以解析错误了，后来发现后端java代码返回的也并不是JSON格式。</p>\n</li>\n</ul>\n<img src=\"/2017/05/13/Ajax-返回错误/error.png\" alt=\"error.png\" title=\"\"> ","categories":["前端"],"tags":["Ajax","jQuery"]},{"title":"Spring（学习笔记 二）","url":"http://yoursite.com/2017/05/10/Spring学习笔记2/","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>Spring框架所使用的主要设计模式<ul>\n<li>代理设计模式（实现AOP的基础）<ul>\n<li>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法，一是修改原有的方法，但是这样做的的话违背了<code>开闭原则</code>，不是很好。二是采用一个代理类调用原来的方法，且对产生的结果进行控制，使用代理模式可以将功能划分的更加清晰，有助于后期维护。</li>\n</ul>\n</li>\n<li>装饰器设计模式（实现框架整合的基础）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><ul>\n<li><p>Spring框架的AOP：面向切面编程</p>\n<ul>\n<li>代理设计模式分类<ul>\n<li>静态代理：通过自己定义类来实现代理设计模式。<ul>\n<li>原型类、原型接口、代理类都需要自己实现。</li>\n<li>弊端：通常情况下，一个原型类对应一个代理类。 </li>\n</ul>\n</li>\n<li>动态代理：通过JDK提供的功能来生成类，来实现代理设计模式。<ul>\n<li>自行定义原型类、原型接口</li>\n<li>系统自动生成原型类所定义的代理类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>代理设计模式的实现（静态代理）</p>\n<ul>\n<li>代理类、原型类、原型接口</li>\n<li><p>在代理类中切入代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 原型接口</div><div class=\"line\">public interface Sourceable &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic void talk() throws Exception;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">// 原型类</div><div class=\"line\">public class Source implements Sourceable &#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void talk() throws Exception &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\tSystem.out.println(&quot;hello&quot;);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 代理类</div><div class=\"line\">public class proxy implements Sourceable &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate Source source;</div><div class=\"line\">\tpublic proxyImpl(Source source) &#123;</div><div class=\"line\">\t\tsuper();</div><div class=\"line\">\t\tthis.source = source;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t// 下面这种引入也是可以的，推荐上面那种引入方式</div><div class=\"line\">\t// private Source source = new Source();</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void talk() throws Exceptions &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\tSystem.out.println(&quot;Start&quot;);</div><div class=\"line\">\t\tsource.talk();</div><div class=\"line\">\t\tSystem.out.println(&quot;End&quot;);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其中代理类中的<code>System.out.println(&quot;Start&quot;);</code>和 <code>System.out.println(&quot;End&quot;);</code>就是切入的代码。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>AOP在Spring框架中的应用，AOP代码的切入，只能切入到IoC创建的对象中。</p>\n<ul>\n<li>创建一个通知Advice：代码切入的方式（在什么情况下进行切入），如下<ul>\n<li>Interception：在原型类代码的执行过程中进行切入。</li>\n<li>Before：在原型类代码执行前切入</li>\n<li>After：在原型类代码执行后切入</li>\n<li>Throw：在原型类代码执行异常时切入</li>\n<li>Introduction： 在原型类代码执行完成后切入</li>\n</ul>\n</li>\n<li>切入点</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">// 创建一个通知</div><div class=\"line\">public class MethodAop implements org.aopalliance.intercept.MethodInterceptor &#123;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\tpublic Object invoke(MethodInvocation arg0) throws Throwable &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t\tSystem.out.println(&quot;开始事务&quot;);</div><div class=\"line\">\t\t\t</div><div class=\"line\"></div><div class=\"line\">\t\t\tObject object = method.proceed();</div><div class=\"line\">\t\t\t</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(&quot;提交事务&quot;);</div><div class=\"line\">\t\t\treturn object;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&#125; catch(e) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tSystem.out.println(&quot;回滚事务&quot;);\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre>","categories":["后端"],"tags":["Spring"]},{"title":"jQuery之attr和prop","url":"http://yoursite.com/2017/05/08/jQuery中的attr和prop/","content":"<h3 id=\"两条使用prop-方法的原则\"><a href=\"#两条使用prop-方法的原则\" class=\"headerlink\" title=\"两条使用prop()方法的原则\"></a>两条使用prop()方法的原则</h3><ul>\n<li>只添加属性名，该属性就会生效</li>\n<li>只存在true/false的属性</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>jQuery中，用attr()方法获取、设置元素的属性，removeAttr()方法来删除元素的属性。</li>\n<li><p>在后来的高版本的jQuery中引入了prop()方法和removeProp()方法，同样是获取、设置和删除元素的属性，那么这两者有什么区别吗？</p>\n<ul>\n<li>在jQuery中，prop()函数的设计目标是用于设置或获取指定DOM元素(指的是JS对象，Element类型)上的属性(property)；attr()函数的设计目标是用于设置或获取指定DOM元素所对应的文档节点上的属性(attribute)。</li>\n<li>attr()是jQuery 1.0版本就有的函数，prop()是jQuery 1.6版本新增的函数。毫无疑问，在1.6之前，你只能使用attr()函数；1.6及以后版本，你可以根据实际需要选择对应的函数。</li>\n<li><p>由于attr()函数操作的是文档节点的属性，因此设置的属性值只能是字符串类型，如果不是字符串类型，也会调用其toString()方法，将其转为字符串类型。<br>prop()函数操作的是JS对象的属性，因此设置的属性值可以为包括数组和对象在内的任意类型。</p>\n</li>\n<li><p>在jQuery 1.6之前，只有attr()函数可用，该函数不仅承担了attribute的设置和获取工作，还同时承担了property的设置和获取工作。</p>\n<ul>\n<li>例如：在jQuery 1.6之前，attr()也可以设置或获取tagName、className、nodeName、nodeType等DOM元素的property。直到jQuery 1.6新增prop()函数，并用来承担property的设置或获取工作之后，attr()才只用来负责attribute的设置和获取工作。</li>\n<li>此外，对于表单元素的checked、selected、disabled等属性，在jQuery 1.6之前，attr()获取这些属性的返回值为Boolean类型：如果被选中(或禁用)就返回true，否则返回false。</li>\n<li>但是从1.6开始，使用attr()获取这些属性的返回值为String类型，如果被选中(或禁用)就返回checked、selected或disabled，否则(即元素节点没有该属性)返回undefined。并且，在某些版本中，这些属性值表示文档加载时的初始状态值，即使之后更改了这些元素的选中(或禁用)状态，对应的属性值也不会发生改变。</li>\n<li>因为jQuery认为：attribute的checked、selected、disabled就是表示该属性初始状态的值，property的checked、selected、disabled才表示该属性实时状态的值(值为true或false)。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>在jQuery 1.6及以后版本中，请使用prop()函数来设置或获取checked、selected、disabled等属性。对于其它能够用prop()实现的操作，也尽量使用prop()函数。</li>\n</ul>\n","categories":["前端"],"tags":["jQuery"]},{"title":"MySQL数据库设计感想","url":"http://yoursite.com/2017/05/06/MySQL数据库设计感想/","content":"<h3 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h3><ul>\n<li>主键是指表中一个列或列的组合（联合主键），其值能唯一地标识表中的每一行。</li>\n<li><p>主键的特点</p>\n<ul>\n<li>唯一性：一个表中只能有一个主键。</li>\n<li>非空性：主键的值不可重复，也不为空。</li>\n<li>必要性：在有些数据库中，虽然主键不是必需的，但最好为每个表都设置一个主键，不管是单主键还是联合主键。它存在代表着表结构的完整性，表的记录必须得有唯一区分的字段，主键主要是用于其他表的外键关联，以及本记录的修改与删除。</li>\n<li>无意义性：在开发过程中，可能会看到将一些表使用有意义的字段表示主键，例如<code>用户登录信息表</code>将<code>登录名</code>作为主键，<code>订单表</code>中将<code>订单编号</code>作为主键，如此设计主键一般都是没什么问题，因为将这些主键基本不具有意义更改的可能性。但是，也有一些例外的情况，例如<code>订单表</code>需要支持需求，订单可以作废，并重新生成订单，而且订单号要保持原订单号一致，那将订单编号作为主键就满足不了要求了。因此读者在使用具有实际意义的字段作为主键时，需要考虑是否存在这种可能性。</li>\n</ul>\n</li>\n<li><p>一般常用的主键有</p>\n<ul>\n<li>自增主键</li>\n<li>GUID主键</li>\n</ul>\n</li>\n<li><p>自增主键</p>\n<ul>\n<li>这种方式是使用数据库提供的自增数值型字段作为自增主键，它的优点是<ol>\n<li>数据库自动编号，速度快，而且是增量增长，按顺序存放，对于检索非常有利。</li>\n<li>数字型，占用空间小，易排序，在程序中传递也方便。</li>\n<li>如果通过非系统增加记录时，可以不用指定该字段，不用担心主键重复问题。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>其实它的缺点也就是来自其优点，缺点如下</p>\n<ol>\n<li>因为自动增长，在手动要插入指定ID的记录时会显得麻烦，尤其是当系统与其它系统集成时，需要数据导入时，很难保证原系统的ID不发生主键冲突（前提是老系统也是数字型的）。特别是在新系统上线时，新旧系统并行存在，并且是异库异构的数据库的情况下，需要双向同步时，自增主键将是你的噩梦；</li>\n<li>在系统集成或割接时，如果新旧系统主键不同是数字型就会导致修改主键数据类型，这也会导致其它有外键关联的表的修改，后果同样很严重；</li>\n<li>若系统也是数字型的，在导入时，为了区分新老数据，可能想在老数据主键前统一加一个字符标识（例如“o”，old）来表示这是老数据，那么自动增长的数字型又面临一个挑战。</li>\n</ol>\n</li>\n<li><p>MySQL（auto_increment）、SQL Server（IDENTITY）、Informix、Oracle（首先创建自增序列，接着为自增主键的表创建插入时的触发器，给自增主键ID赋值）等数据库都支持这种自增主键，这种主键在各种系统中应用广泛，但是如果考虑到有新旧系统并存等问题，为了避免不必要的麻烦，使用自增主键要三思。</p>\n</li>\n</ul>\n</li>\n<li><p>GUID主键</p>\n<ul>\n<li>目前一个比较好的主键是采用GUID（Globally Unique Identifier，全球唯一标识符），GUID的特点如下：<ul>\n<li>（1）  在空间上和时间上具有唯一性，保证同一时间不同地方产生的数字不同；<br>（2）  世界上的任何两台计算机都不会生成重复的GUID值；<br>（3）  需要GUID的时候，可以完全由算法自动生成，不需要一个权威机构来管理；<br>（4）  GUID的长度固定，并且相对而言较短小，非常适合于排序、标识和存储。<br>可以将GUID主键定义为字符型，但值由GUID生成，GUID是可以自动生成，也可以程序生成，而且键值不可能重复，可以解决系统集成问题，几个系统的GUID值导到一起时，也不会发生重复，就算有“o”老数据也可以区分，而且效率很高。</li>\n</ul>\n</li>\n<li>在SQL里也可以使用 NewID()生成。主要优点是：<ul>\n<li>（1）同 IDENTITY 列相比，uniqueidentifier列可以通过 NewID()函数提前得知新增加行的ID，为应用程序的后续处理提供很大方便；<br>（2）便于数据库移植，其它数据库中并不一定具有 IDENTITY 列，而 GUID列可以作为字符型列转换到其它数据库中，同时将应用程序中产生的GUID值存入数据库，它不会对原有数据带来影响。<br>缺点是：<br>（1）GUID值较长，不容易记忆和输入，而且这个值是随机、无顺序的。<br>（2）GUID的值有16个字节，与其它诸如 4 字节的整数相比要相对大一些。这意味着如果在数据库中使用 uniqueidentifier键，可能会带来两方面的消极影响：存储空间增大、索引时间较慢。<br>基于上面的分析，使用GUID的利大于弊。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自增主键设计\"><a href=\"#自增主键设计\" class=\"headerlink\" title=\"自增主键设计\"></a>自增主键设计</h3><ul>\n<li>使用自增主键时，会碰见命名系统的新旧改变，那么可以在新命名系统上添加一段标识数字。</li>\n<li><p>数据库用id做主键，并且自增，这样设计好吗？</p>\n<blockquote>\n<p>这也没绝对的好坏，但以我来说，尽量不用自增主键。除非：</p>\n<blockquote>\n<ol>\n<li>表中找不出3个以内字段可以表示的业务主键</li>\n<li>没有集中大量的插入操作</li>\n<li>不使用自增id作为外键（即id变化不影响系统逻辑和功能）</li>\n</ol>\n</blockquote>\n<p>同时符合以上3条，我会用自增id；通常尽量使用业务主键做id，实在找不出业务主键，那就用guid。</p>\n</blockquote>\n</li>\n<li><p>例如购物车表的设计，用户ID和商品ID是外键，由于购物车本身不作为父表与其他的表发生交互，很适合采用自增主键。</p>\n</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>参考链接 <a href=\"http://blog.csdn.net/likika2012/article/details/9949949\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/likika2012/article/details/9949949</a></li>\n</ul>\n","categories":["数据库"],"tags":["MySQL","数据库"]},{"title":"Ajax上传文件","url":"http://yoursite.com/2017/05/05/Ajax上传文件/","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>contentType，内容类型，用于定义网络文件的类型和网页的编码，决定文件接收方应该以什么形式、什么编码来读取这个文件。</li>\n<li>以前利用form表单来上传数据时，默认的contentType是<code>application/x-www-form-urlencoded</code>，意思是数据被编码成键值对，这是标准的编码格式。如果要来上传文件，那么contentType必须为<code>multipart/form-data</code>，意思是数据被编码为一条消息，页面上的每个控件对应消息中的一个部分。</li>\n<li>这里使用到的技术，前端为jQuery的Ajax，后端为Java的servlet。</li>\n</ul>\n<h3 id=\"最简单明了的代码示例\"><a href=\"#最简单明了的代码示例\" class=\"headerlink\" title=\"最简单明了的代码示例\"></a>最简单明了的代码示例</h3><ul>\n<li><p>HTML，使用最简单的一个表单，包含一个text和file类型的控件。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">&lt;!-- 编码必须为 multipart/form-data --&gt;</div><div class=\"line\">&lt;form id=&quot;uploadForm&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class=\"line\">          &lt;input type=&quot;text&quot; name=&quot;description&quot; /&gt;</div><div class=\"line\">          &lt;input id=&quot;file&quot; type=&quot;file&quot; name=&quot;file&quot;  /&gt;</div><div class=\"line\">          &lt;button id=&quot;upload&quot; &gt;upload&lt;/button&gt;</div><div class=\"line\"> &lt;/form&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>JS</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">function test() &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\tvar form = document.getElementById(&apos;uploadForm&apos;);</div><div class=\"line\">\tvar formdata = new FormData(form);</div><div class=\"line\">         </div><div class=\"line\">         $.ajax(&#123;</div><div class=\"line\">             url: &apos;addnewcommodity&apos;, // 后端Java接收地址</div><div class=\"line\">             type: &apos;POST&apos;, // 必须为POST方式</div><div class=\"line\">             cache: false,</div><div class=\"line\">             data: formdata,</div><div class=\"line\">             processData: false,</div><div class=\"line\">             contentType: false,</div><div class=\"line\">             success: function (returndata) &#123;  </div><div class=\"line\">                   alert(&quot;success&quot;); </div><div class=\"line\">             &#125;,  </div><div class=\"line\">             error: function (returndata) &#123;  </div><div class=\"line\">                   alert(&quot;error&quot;);  </div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">         </div><div class=\"line\"> $(&apos;#upload2&apos;).on(&apos;click&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">     test2();</div><div class=\"line\"></div><div class=\"line\"> &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>到这里前端做的事已经完成了，剩下的就是后端的事情了。</p>\n</li>\n<li><p>Servlet，这里新建一个Servlet，注意这两个注解！很重要。然后关注doGet()和doPost()方法，看后端是如何获取到这两个表单的数据的！</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t@WebServlet(&quot;/addnewcommodity&quot;)</div><div class=\"line\">\t@MultipartConfig</div><div class=\"line\">\tpublic class AddNewCommodity extends HttpServlet &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\tprivate static final long serialVersionUID = 1L;</div><div class=\"line\">     </div><div class=\"line\">\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</div><div class=\"line\">\t\t\tdoPost(request, response);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tString description = request.getParameter(&quot;description&quot;);</div><div class=\"line\">\t\t\tPart imgPart = request.getPart(&quot;file&quot;);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t// 下面的代码是生成一个输出路径，并将这个文件 imgPart 存储到路径中读者可不比理会，只需关注上面的获取数据。</div><div class=\"line\">\t\t\tDate date = new Date(System.currentTimeMillis());</div><div class=\"line\">\t\t\tSimpleDateFormat sd = new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;);</div><div class=\"line\">\t\t\tString temp = sd.format(date); // 获取一个时间戳</div><div class=\"line\">\t\t\tString imgPartFileName = imgPart.getSubmittedFileName();//获取上传文件名</div><div class=\"line\">\t\t\tString imgPartFileNamePrefix = imgPartFileName.substring(0, imgPartFileName.indexOf(&apos;.&apos;)); // 取出文件的前缀名</div><div class=\"line\">\t\t\tString imgPartFileNameSuffer = imgPartFileName.substring(imgPartFileName.lastIndexOf(&apos;.&apos;)); // 取出文件的后缀名</div><div class=\"line\">\t\t\tString newFileName = imgPartFileNamePrefix + &quot;_&quot; + temp + imgPartFileNameSuffer; // 生成的新文件名</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tString savePath = this.getServletContext().getRealPath(&quot;/common/img/commoditypicture/&quot;); // 获取当前servlet的存储路径</div><div class=\"line\">\t\t\tSystem.out.println(savePath);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tString fileSavePath = savePath + newFileName; // 文件保存路径完成</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t\t\tOutputStream out = null;</div><div class=\"line\">\t\t\tInputStream filecontent = null;</div><div class=\"line\">\t\t\tPrintWriter writer = response.getWriter();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t    try &#123;</div><div class=\"line\">\t\t    \t</div><div class=\"line\">\t\t    \tout = new FileOutputStream(fileSavePath);</div><div class=\"line\">\t\t        filecontent = imgPart.getInputStream();</div><div class=\"line\">\t\t        </div><div class=\"line\">\t\t        int read = 0;</div><div class=\"line\">\t\t        final byte[] bytes = new byte[1024];</div><div class=\"line\">\t</div><div class=\"line\">\t\t        while ((read = filecontent.read(bytes)) != -1) &#123;</div><div class=\"line\">\t\t            out.write(bytes, 0, read);</div><div class=\"line\">\t\t        &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t        writer.println(&quot;New file &quot; + newFileName + &quot; created at &quot; + fileSavePath);</div><div class=\"line\">\t\t        </div><div class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\twriter.println(&quot;You either did not specify a file to upload or are &quot;</div><div class=\"line\">\t\t                + &quot;trying to upload a file to a protected or nonexistent &quot;</div><div class=\"line\">\t\t                + &quot;location.&quot;);</div><div class=\"line\">\t\t        writer.println(&quot;&lt;br/&gt; ERROR: &quot; + e.getMessage());</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t&#125; finally &#123;</div><div class=\"line\">\t\t        if (out != null) &#123;</div><div class=\"line\">\t\t            out.close();</div><div class=\"line\">\t\t        &#125;</div><div class=\"line\">\t\t        if (filecontent != null) &#123;</div><div class=\"line\">\t\t            filecontent.close();</div><div class=\"line\">\t\t        &#125;</div><div class=\"line\">\t\t        if (writer != null) &#123;</div><div class=\"line\">\t\t            writer.close();</div><div class=\"line\">\t\t        &#125;</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t    </div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>至此，大体工作都完成了。如果你要了解FormData的兼容性，请移步<a href=\"http://www.caniuse.com/#search=formdata\" target=\"_blank\" rel=\"external\">caniuse</a>。</li>\n<li>参考链接：<a href=\"https://docs.oracle.com/javaee/7/tutorial/servlets016.htm#BABDGFJJ\" target=\"_blank\" rel=\"external\">Oracle官方实例 The fileupload Example Application</a></li>\n</ul>\n","categories":["前端"],"tags":["Ajax","FormData"]},{"title":"Ajax分页","url":"http://yoursite.com/2017/05/03/Ajax分页与Session分页/","content":"<h3 id=\"Request对象实现分页\"><a href=\"#Request对象实现分页\" class=\"headerlink\" title=\"Request对象实现分页\"></a>Request对象实现分页</h3><ul>\n<li>由于最近在做毕设，碰到需要从数据库取出大量数据，直接把大量的数据展现在前端页面上时，由于数据过多，体验并不好。所以采取分页来实现。</li>\n<li>后端是用Java来做的，数据库是MySQL。</li>\n<li>逻辑是<ul>\n<li>首先访问一个路由 比如：/getSome。</li>\n<li>Servlet接收到这个路由，并从数据库取出部分数据，通过request对象返回JSP页面所需要的数据，并转发到特定的JSP页面。</li>\n<li>JSP页面通过EL和JSTL来接收后端传来的数据，并填入指定位置。</li>\n<li>然后a标签的href就通过携带参数来实现上下页，分页，第几页。</li>\n</ul>\n</li>\n<li>这样实现固然能实现分页，但是，却需要刷新整个页面。要是不想刷新整个页面就只能用Ajax来实现分页了。</li>\n</ul>\n<h3 id=\"Ajax实现分页\"><a href=\"#Ajax实现分页\" class=\"headerlink\" title=\"Ajax实现分页\"></a>Ajax实现分页</h3><ul>\n<li>Ajax分页只需要刷新部分，就可以更新数据，体验很好。</li>\n<li><p>前端使用的semanticUI，HTML为</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;ccc&quot;  class=&quot;ui blurring segment one column row&quot;&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                &lt;!-- 在segment中出现遮罩层 --&gt;</div><div class=\"line\">                &lt;div class=&quot;ui dimmer&quot;&gt;</div><div class=\"line\">                      &lt;div class=&quot;ui text loader&quot;&gt;加载中&lt;/div&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">                  </div><div class=\"line\"></div><div class=\"line\">                &lt;table id=&quot;zzc&quot; class=&quot;ui celled table&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                     &lt;thead&gt;</div><div class=\"line\">                        &lt;tr&gt;</div><div class=\"line\">                            &lt;th&gt;编号&lt;/th&gt;</div><div class=\"line\">                            &lt;th&gt;名称&lt;/th&gt;</div><div class=\"line\">                            &lt;th&gt;描述&lt;/th&gt;</div><div class=\"line\">                            &lt;th&gt;售价&lt;/th&gt;</div><div class=\"line\">                            &lt;th&gt;进价&lt;/th&gt;</div><div class=\"line\">                            &lt;th&gt;库存&lt;/th&gt; </div><div class=\"line\">                            &lt;th&gt;分类&lt;/th&gt;</div><div class=\"line\">                            &lt;th&gt;图片&lt;/th&gt;</div><div class=\"line\">                        &lt;/tr&gt;</div><div class=\"line\">                     &lt;/thead&gt;</div><div class=\"line\">\t</div><div class=\"line\">                     &lt;tbody id=&quot;tbody&quot;&gt;</div><div class=\"line\">                         &lt;!-- 数据列表 --&gt;</div><div class=\"line\">\t</div><div class=\"line\">                     &lt;/tbody&gt;</div><div class=\"line\">\t</div><div class=\"line\">                     &lt;tfoot id=&quot;tfoot&quot;&gt;</div><div class=\"line\">                     \t\t&lt;!-- 分页条 --&gt;</div><div class=\"line\">                       </div><div class=\"line\">                     &lt;/tfoot&gt;</div><div class=\"line\">                    </div><div class=\"line\">                  &lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">                  </div><div class=\"line\">              &lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>JS</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">\t$(function() &#123;</div><div class=\"line\"></div><div class=\"line\">            </div><div class=\"line\">            var curPage = 1; //当前页码 </div><div class=\"line\">            var total,pageSize,totalPage; //总记录数，每页显示数，总页数 </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            //获取 第page页 的数据 </div><div class=\"line\">            function getData(page) &#123;</div><div class=\"line\"></div><div class=\"line\">                $(&apos;#ccc&apos;).dimmer(&apos;show&apos;);// 产生遮罩层，为了友好的交互体验</div><div class=\"line\"></div><div class=\"line\">                $.ajax(&#123; </div><div class=\"line\">                    type: &apos;GET&apos;, </div><div class=\"line\">                    url: &apos;getallcommodityajax&apos;, </div><div class=\"line\">                    data: &#123;</div><div class=\"line\">                        currentPage: page - 1</div><div class=\"line\">                    &#125;, </div><div class=\"line\">                    dataType:&apos;json&apos;, </div><div class=\"line\">                    beforteSend: function(data, textStatus, xhr) &#123;</div><div class=\"line\">                        console.log(&apos;发送前&apos;);</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    success:function(data, textStatus, xhr)&#123; </div><div class=\"line\">                    \t// 这里data是后端servlet返回的JSON数据对象，读者不必在意</div><div class=\"line\">                        $(&apos;#ccc&apos;).dimmer(&apos;hide&apos;);// 清除遮罩层</div><div class=\"line\">                        $(&apos;#tbody&apos;).empty();// 清除以前的数据区，防止数据展示叠加</div><div class=\"line\">                        total = data[3]; //总记录数 </div><div class=\"line\">                        pageSize = data[4]; //每页显示条数 </div><div class=\"line\">                        curPage = page; //当前页 </div><div class=\"line\">                        totalPage = data[1]; //总页数 </div><div class=\"line\">                        var node = &quot;&quot;;</div><div class=\"line\">                        </div><div class=\"line\">                        // data[0]为数据列</div><div class=\"line\">                        $.each(data[0],function(i, item)&#123; </div><div class=\"line\"></div><div class=\"line\">                            node += &apos;&lt;tr&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+</div><div class=\"line\">&apos;                            &lt;div class=&quot;ui ribbon label&quot;&gt;&apos;+ item.commodityNo +&apos;&lt;/div&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+ item.commodityName +&apos;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+ item.commodityDescription +&apos;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+ item.commodityPrice +&apos;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+ item.commodityBid +&apos;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+ item.commodityStock +&apos;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;&apos;+ item.commodityType +&apos;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                          &lt;td&gt;8&lt;img class=&quot;ui right spaced avatar image&quot; src=&quot;./administrator/img/logo.png&quot;&gt;&lt;/td&gt;&apos;+</div><div class=\"line\">&apos;                        &lt;/tr&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                        &#125;);</div><div class=\"line\"></div><div class=\"line\">                        $(&apos;#tbody&apos;).append(node); </div><div class=\"line\">                    &#125;, </div><div class=\"line\">                    complete:function()&#123; </div><div class=\"line\">                        $(&apos;#ccc&apos;).dimmer(&apos;hide&apos;);</div><div class=\"line\"></div><div class=\"line\">                        getPageBar(); //生成分页条 </div><div class=\"line\">                    &#125;, </div><div class=\"line\">                    error:function()&#123; </div><div class=\"line\">                        alert(&quot;数据加载失败&quot;); </div><div class=\"line\">                    &#125; </div><div class=\"line\">                &#125;); </div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            //获取分页条 </div><div class=\"line\">            function getPageBar()&#123; </div><div class=\"line\"></div><div class=\"line\">                $(&apos;#tfoot&apos;).empty();</div><div class=\"line\"></div><div class=\"line\">                var header = &apos;&lt;tr&gt;&apos;+</div><div class=\"line\">&apos;                            &lt;th colspan=&quot;8&quot;&gt;&apos;+</div><div class=\"line\">&apos;                              &lt;div class=&quot;ui right floated pagination menu&quot;&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">                var footer = &apos;&lt;/div&gt;&apos;+</div><div class=\"line\">&apos;                            &lt;/th&gt;&apos;+</div><div class=\"line\">&apos;                        &lt;/tr&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">                var body = &quot;&quot;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                //页码大于最大页数 </div><div class=\"line\">                if(curPage&gt;totalPage) curPage = totalPage; </div><div class=\"line\">                //页码小于1 </div><div class=\"line\">                if(curPage&lt;1) curPage = 1; </div><div class=\"line\">                body = &apos;&lt;div class=&quot;item&quot;&gt;&apos;+</div><div class=\"line\">&apos;                                    &lt;div class=&quot;ui tag label&quot;&gt;&apos; + &apos;共&apos; + total + &apos;条数据 &apos; +  curPage + &apos;/&apos; + totalPage + &apos;&lt;/div&gt;&apos;+</div><div class=\"line\">&apos;                       &lt;/div&gt;&apos;;</div><div class=\"line\">                 </div><div class=\"line\">                //如果是第一页 </div><div class=\"line\">                if(curPage==1)&#123; </div><div class=\"line\">                    body += &apos;&lt;a class=&quot;item&quot;&gt;首页&lt;/a&gt;&lt;a class=&quot;icon item&quot;&gt;&lt;i class=&quot;left chevron icon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&apos;; </div><div class=\"line\">                &#125;else&#123; </div><div class=\"line\">                    body += &apos;&lt;a href=&quot;javascript:void(0)&quot;  class=&quot;item&quot; rel=&quot;1&quot;&gt;首页&lt;/a&gt;&apos; + </div><div class=\"line\">                    &apos;&lt;a href=&quot;javascript:void(0)&quot; class=&quot;icon item&quot; rel=&quot;&apos;+(curPage-1)+&apos;&quot;&gt;&lt;i class=&quot;left chevron icon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&apos;; </div><div class=\"line\">                &#125; </div><div class=\"line\">                 </div><div class=\"line\">                //如果是最后页 </div><div class=\"line\">                if(curPage&gt;=totalPage)&#123; </div><div class=\"line\">                    body += &apos;&lt;a class=&quot;icon item&quot;&gt;&lt;i class=&quot;right chevron icon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;item&quot;&gt;尾页&lt;/a&gt;&apos;; </div><div class=\"line\">                &#125;else&#123; </div><div class=\"line\">                    body += &apos;&lt;a href=&quot;javascript:void(0)&quot; class=&quot;icon item&quot; rel=&quot;&apos;+(parseInt(curPage)+1)+&apos;&quot;&gt;&apos; + </div><div class=\"line\">                    &apos;&lt;i class=&quot;right chevron icon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;item&quot; href=&quot;javascript:void(0)&quot; rel=&quot;&apos;+totalPage+&apos;&quot;&gt;尾页&lt;/a&gt; &apos;; </div><div class=\"line\">                &#125; </div><div class=\"line\">                </div><div class=\"line\">                var pagination = header + body + footer;</div><div class=\"line\"></div><div class=\"line\">                $(&apos;#tfoot&apos;).html(pagination); </div><div class=\"line\">            &#125;</div><div class=\"line\">            getData(1);</div><div class=\"line\"></div><div class=\"line\">\t\t\t// 因为分页的a标签是动态生成的，所以需要动态绑定</div><div class=\"line\">            $(&apos;#tfoot&apos;).on(&apos;click&apos;,&apos;a&apos;,function()&#123; </div><div class=\"line\">                var rel = $(this).attr(&quot;rel&quot;); </div><div class=\"line\">                if(rel)&#123; </div><div class=\"line\">                    getData(rel); </div><div class=\"line\">                &#125; </div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>测试图示</li>\n</ul>\n<img src=\"/2017/05/03/Ajax分页与Session分页/1.png\" alt=\"1.png\" title=\"\">\n<img src=\"/2017/05/03/Ajax分页与Session分页/2.png\" alt=\"2.png\" title=\"\">\n<img src=\"/2017/05/03/Ajax分页与Session分页/3.png\" alt=\"3.png\" title=\"\">","categories":["前端"],"tags":["Ajax","分页"]},{"title":"Spring MVC 学习指南","url":"http://yoursite.com/2017/05/01/Spring-Mvc-学习指南/","content":"<h3 id=\"SpringMVC与Spring的关系\"><a href=\"#SpringMVC与Spring的关系\" class=\"headerlink\" title=\"SpringMVC与Spring的关系\"></a>SpringMVC与Spring的关系</h3><ul>\n<li>Spring框架是一个开源的企业应用开发框架，是一个轻量级的解决方案，其中包含了20多个不同的模块，其中，我们要关注的是Core模块和Bean模块，以及SpringMVC模块。SpringMVC是Spring的一个子框架。</li>\n</ul>\n<h3 id=\"什么是依赖注入？\"><a href=\"#什么是依赖注入？\" class=\"headerlink\" title=\"什么是依赖注入？\"></a>什么是依赖注入？</h3><ul>\n<li>Core模块和Bean模块提供依赖注入的解决方案。</li>\n<li>依赖注入技术作为代码可测试性的一个解决方案已经被广泛应用。</li>\n<li>很多人在使用中，并不会去区分依赖注入和控制反转（IoC）。</li>\n<li><p>简单来说说依赖注入是什么?</p>\n<ul>\n<li>假设有两个类 A，B，现在A依赖B</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class A &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method_A() &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\tB b = new B();</div><div class=\"line\">\t\tb.method_B();</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>要想使用B类中的方法，A类必须要先实例化一个B。现在B是一个具体类，通过new关键字可以直接创建B的实例。但是，如果B只是一个接口，并且有多个实现类，那么问题就会变得复杂了，如果任意选择接口B的一个实现类，那么意味着A的可重用性大大降低了，因为无法采用B的其他实现。</li>\n<li>依赖注入是这样来处理上面的情况的：接管对象的创建工作，并将该对象的引用注入到需要使用的对象中。那么，对上面的例子，依赖注入框架会分别创建对象A和对象B，将对象B注入到对象A中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class A &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate B b;</div><div class=\"line\">\tpublic A(B b) &#123;</div><div class=\"line\">\t\tthis.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method_A() &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tb.method_B();</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>另外，在Spring2.5以后，可以通过使用<code>@Autowired</code>注入B接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class A &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t@Autowired</div><div class=\"line\">\tprivate B b;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method_A() &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tb.method_B();</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Spring配置文件\"><a href=\"#Spring配置文件\" class=\"headerlink\" title=\"Spring配置文件\"></a>Spring配置文件</h3><ul>\n<li>配置文件的根元素通常如下,这里的Spring的版本为4.3.5</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\">\txmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\txmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; </div><div class=\"line\">\txmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.3.xsd&quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">        </div><div class=\"line\">        .....</div><div class=\"line\">        </div><div class=\"line\"> </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要增强Spring的配置能力，可以在<code>schema location</code>属性中添加相应的schema。比如SpringMVC的配置文件：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\">\txmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\txmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; </div><div class=\"line\">\txmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.3.xsd &quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">        ......</div><div class=\"line\">        </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n","categories":["后端"],"tags":["SpringMVC"]},{"title":"Java函数式编程","url":"http://yoursite.com/2017/04/29/Java函数式编程/","content":"<ul>\n<li>商业发展需要更多复杂的应用，大多数程序都跑在功能强大的多核CPU的机器上，带有高效运行时编译器的Java虚拟机的出现，能让程序员将更多的精力放在编写干净、易于维护的代码上，而不是思考如何将每一个CPU时钟周期、每字节内存物尽其用。</li>\n<li>多核CPU的兴起成为了不容回避的事实。涉及锁的编程算法不但容易出错，而且耗费时间。人们开发了java.util.concurrent包和很多第三方类库，试图将并发抽象化，帮助程序员写出在多核CPU上运行良好的程序。很可惜，到目前为止，这方面的成果还远远不够！</li>\n<li><p>面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此。</p>\n</li>\n<li><p>Swing的事件监听器</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">button.addActionListener(new ActionListener() &#123;</div><div class=\"line\">\tpublic void actionPerformed(ActionEvent event) &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\tSystem.out.print(&quot;button clicked&quot;);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>转为Lambda表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">button.addActionListener( event -&gt; System.out.print(&quot;button clicked&quot;));</div></pre></td></tr></table></figure>\n<ul>\n<li>各种形式的Lambda表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable noArguments = () -&gt; System.out.print(&quot;button clicked&quot;)</div><div class=\"line\"></div><div class=\"line\">Runnable multiStatement = () -&gt; &#123;</div><div class=\"line\">\tSystem.out.print(&quot;Hello&quot;);</div><div class=\"line\">\tSystem.out.print(&quot;world&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">button.addActionListener( event -&gt; System.out.print(&quot;button clicked&quot;));</div><div class=\"line\"></div><div class=\"line\">BinaryOperator&lt;Long&gt; add = (x, y) -&gt; x + y;</div><div class=\"line\">BinaryOperator&lt;Long&gt; addExplicit = (Long x, Long y) -&gt; x + y;</div></pre></td></tr></table></figure>\n","categories":[],"tags":["函数式编程"]},{"title":"页面渲染（学习笔记）","url":"http://yoursite.com/2017/04/16/客服端渲染和服务端渲染/","content":"<h3 id=\"一个HTML页面的渲染\"><a href=\"#一个HTML页面的渲染\" class=\"headerlink\" title=\"一个HTML页面的渲染\"></a>一个HTML页面的渲染</h3><ul>\n<li>首先，我们来看看浏览器的基本组成。</li>\n</ul>\n<img src=\"/2017/04/16/客服端渲染和服务端渲染/1.png\" alt=\"1.png\" title=\"\">\n<ul>\n<li><p>浏览器的主要构成</p>\n<ul>\n<li>用户界面</li>\n<li>浏览器引擎：用来查询及操作渲染引擎的接口。</li>\n<li>渲染引擎：用来显示用户请求的内容。</li>\n<li>网络：完成网络调用，具有平台无关性。</li>\n<li>UI后端：用来绘制类似组合选择框及对话框等基本组件。</li>\n<li>JS解释器：用来解释执行JS代码。</li>\n<li>数据存储：属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据，H5定义了一些新的database技术，这是一种轻量级完整的客户端存储技术。</li>\n</ul>\n</li>\n<li><p>渲染引擎</p>\n<ul>\n<li>渲染引擎的职责就是渲染，即在浏览器窗口中显示用户所请求的内容，客户在浏览器的地址栏中输入什么，它就会显示什么（如果它有能力渲染的话），比如你打开一个PDF文件，它就是打不开的，你可以给它安装一个PDF插件就可以打开了。不同浏览器的插件是不一样，Chorme就有自己的插件生态系统，比如你要开发React，你可以安装一个<code>React Developer Tools</code>插件就可以在控制台显示出React的组件了。</li>\n<li>渲染引擎分类<ul>\n<li>Firefox使用gecko引擎</li>\n<li>IE使用trident引擎</li>\n<li>2015年微软推出自己新的浏览器，原名叫斯巴达，后改名edge,使用edge引擎</li>\n<li>Opera最早使用presto引擎，后来弃用</li>\n<li>Chrome、Safari、Opera使用webkit引擎</li>\n<li>13年Chrome、Opera开始使用blink引擎</li>\n</ul>\n</li>\n<li>JavaScript引擎分类（现在JS引擎独立出来了，以前是包含在渲染引擎中的）<ul>\n<li>老版本IE使用Jscript引擎</li>\n<li>IE9之后使用Chakra引擎</li>\n<li>Edge浏览器仍然使用Chakra引擎</li>\n<li>Opera使用Carakan引擎</li>\n<li>Firefox使用monkey系列引擎</li>\n<li>Safari使用的SquirrelFish系列引擎</li>\n<li>Chrome使用V8引擎（NodeJs其实就是封装了V8引擎）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTML页面的渲染过程如下：</p>\n</li>\n</ul>\n<img src=\"/2017/04/16/客服端渲染和服务端渲染/2.png\" alt=\"2.png\" title=\"\"> \n<h3 id=\"客户端渲染\"><a href=\"#客户端渲染\" class=\"headerlink\" title=\"客户端渲染\"></a>客户端渲染</h3><ul>\n<li>客服端渲染主要用在单页应用，需要使用JS动态生成更多的HTML。</li>\n<li>JS生成代码，一般来说就是从服务器异步获取json数据。</li>\n<li>作为现代Web应用，ajax的大量使用，使得前端工程师们日常的开发少不了拼装模板，渲染模板。<ol>\n<li>ajax获取HTML字符串直接渲染方式<ul>\n<li>这种方式虽然首屏较快，但是，每次传输同样的新闻模板也是需要浪费不少模板流量的。 </li>\n<li>百度新闻 </li>\n</ul>\n</li>\n<li>ajax获取数据，前端进行模板拼装的方式<ul>\n<li>如果模板的拼装会发生多次，且模板基本一致，只是数据变动的话，最好是一开始采用这种方式。 </li>\n<li>不过，这种做法也有问题，就是用户同步刷新的时候，需要等页面渲染完，再发一个请求，去请求第一屏的数据，才能开始渲染。这个过程相当于发了两次请求，等待的时候还是有所感知的， </li>\n<li>网易新闻、今日头条 </li>\n</ul>\n</li>\n</ol>\n</li>\n<li>上面是传统的 HTML + JS。</li>\n</ul>\n<hr>\n<ul>\n<li>解决客户端渲染问题的最后一个锦囊就是引入模板，模板最本质的作用是<code>变静为动</code><br>一切利用这方面的都是优势，不利用的都是劣势。</li>\n<li><p>前端模板引擎、后端模板引擎</p>\n<ul>\n<li>模板的工作原理可以简单地分成两个步骤：模板解析（翻译）和数据渲染。这两个步骤可分别部署在前端或后端来执行。</li>\n<li>放在后端执行，则涉及到后端模板引擎<ul>\n<li>Smarty、FreeMarker</li>\n<li>FreeMarker是一个后端模板引擎，一个基于模板生成文本输出的通用工具，使用纯Java编写，模板用servlet提供的数据动态地生成 HTML，模板语言是强大的直观的，编译器速度快，输出接近静态HTML页面的速度。</li>\n</ul>\n</li>\n<li><p>放在前端执行，则涉及到前端模板引擎 </p>\n<ul>\n<li>前端模版的优缺点<ul>\n<li>提高了前端开发的可维护性（后期改起来方便）以及可扩展性（想要增加功能，增加需求方便）；</li>\n<li>提高了开发效率提高（程序逻辑组织更好，调试方便）；</li>\n<li>最重要的一点就是：【视图（包括展示渲染逻辑）与程序逻辑的分离】。</li>\n<li>减轻服务器负担，</li>\n<li>可能不利于SEO以及模版错误不好调试。</li>\n</ul>\n</li>\n<li><p>前端模板技术分类</p>\n<ul>\n<li><p>String-based 模板技术 (基于字符串的parse和compile过程)，产生HTML结构，通过innerHTML插入到DOM中。</p>\n<ul>\n<li>Smarty</li>\n<li>Jade</li>\n<li>artTemplate</li>\n<li>etpl</li>\n<li>优点：相对于字符串拼接，实现了模版和代码逻辑的分离，不用大量的字符串拼接</li>\n<li><p>缺点：render之后数据即与view完全分离，innerHTML的性能问题，安全问题等</p>\n<img src=\"/2017/04/16/客服端渲染和服务端渲染/3.png\" alt=\"3.png\" title=\"\">\n</li>\n</ul>\n</li>\n<li><p>Dom-based 模板技术 (基于Dom的link或compile过程)</p>\n</li>\n<li>杂交的Living templating 技术 (基于字符串的parse 和 基于dom的compile过程)。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>前后端同构</p>\n<ul>\n<li>前后端的模板语法一致</li>\n</ul>\n</li>\n<li>比起后端渲染，前端渲染既能提升性能，又没有无解的安全问题。</li>\n<li>后端模板可以承载页面的固定数据，如登陆的webUser，它随着页面的产生而产生，随着页面的消失而消失；前端模板主要实现复杂的页面交互伴随的数据变化，进行页面无刷新的数据更新，实现页面的多彩化。所以前端模板和后端模板要相互结合使用，才能更好的服务于web应用。</li>\n</ul>\n<h3 id=\"服务端渲染\"><a href=\"#服务端渲染\" class=\"headerlink\" title=\"服务端渲染\"></a>服务端渲染</h3><ul>\n<li>服务端渲染由于计算量主要集中在服务端，那么在用户请求量很大的情况下系统负载会比客户端渲染的方案高一些。如果因此导致服务器响应变慢，那么用户体验也会下降。</li>\n</ul>\n<h3 id=\"后端渲染到前端渲染的转移\"><a href=\"#后端渲染到前端渲染的转移\" class=\"headerlink\" title=\"后端渲染到前端渲染的转移\"></a>后端渲染到前端渲染的转移</h3><ul>\n<li><p>计算任务转移<br>原本由服务器执行的渲染任务转移给了客户端，这在大量用户访问的时候大大减轻后端的压力。让后端专注做后端应该做的事情，性能将大大提高，因为服务器做的事情确实减小了，而现在随着客户端软硬件的发展，也能处理好大多数的渲染工作了。</p>\n</li>\n<li><p>放弃前端权限<br>将整个UI逻辑交给客户端以后，一些有经验有能力的用户可能会劫持UI，使得他们能够看到一些不该看到的界面。这似乎违反了安全的原则。但是<code>一切在前端谈安全都是耍流氓</code>，后端不能轻信一切从前端传来的数据，切记一定要做好过滤与验证。只要使用SSL、屏蔽XSS、后端不出漏洞，想伪造身份劫持App还是难以做到的。</p>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://my.oschina.net/MrHou/blog/704640\" target=\"_blank\" rel=\"external\">https://my.oschina.net/MrHou/blog/704640</a></li>\n<li><a href=\"http://web.jobbole.com/87670/\" target=\"_blank\" rel=\"external\">前端模板总结</a></li>\n</ul>\n","categories":["前端"],"tags":["渲染"]},{"title":"Spring（学习笔记 一）","url":"http://yoursite.com/2017/04/09/Spring学习笔记/","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>Spring框架核心功能：</p>\n<blockquote>\n<p>管理程序的代码（代码的切入）：AOP（面向切面的编程）</p>\n<p> 内存空间的创建（控制对象的作用域）：IoC（依赖注入，控制反转）</p>\n</blockquote>\n</blockquote>\n<hr>\n<hr>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><ol>\n<li><p>Spring框架的IoC（Inversion of Control）：控制反转IoC是Inversion of Control的缩写，是说对象的控制权进行转移，转移到第三方，比如转移交给了IoC容器，它就是一个创建工厂，你要什么对象，它就给你什么对象，有了IoC容器，依赖关系就变了，原先的依赖关系就没了，它们都依赖IoC容器了，通过IoC容器来建立它们之间的关系。</p>\n<ol>\n<li><p>内存空间的创建：反射机制创建对象。</p>\n</li>\n<li><p>内存空间的赋值    </p>\n<ol>\n<li>get/set方法注入：默认的赋值方式。<ol>\n<li>id名称</li>\n<li>class类型 </li>\n</ol>\n</li>\n<li>构造方法注入：对注入的bean需要创建相应的构造方法，基本数据类型采用的还是get/set方法。<ol>\n<li>class类型</li>\n</ol>\n</li>\n<li>接口注入：接口引入进来。这种注入方式，还是以上两种方式，只不过是在实现数据注入的基础之上加入接口。</li>\n</ol>\n</li>\n<li><p>Spring框架对象的匹配方式</p>\n<ol>\n<li>id名称（get/set方法注入）<ol>\n<li>类中的属性名和Bean中id值相匹配，<code>&lt;property name=&quot;类的属性&quot; ref=&quot;关联的Bean的id值&quot; /&gt;</code>。</li>\n<li>自动匹配。</li>\n</ol>\n</li>\n<li>class类型（get/set方法注入）</li>\n<li>构造函数</li>\n<li>接口注入</li>\n</ol>\n</li>\n<li><p>Spring框架对象的生命周期（在同一个ApplicationContext范围内的生命周期）</p>\n<ol>\n<li>所有项目都可以设置生命周期<ol>\n<li>单例模式：<code>scope=&quot;sington&quot;</code>，Spring只创建一个实例，一般逻辑业务都是使用单例模式</li>\n<li>原型模式：<code>scope=&quot;protype&quot;</code>，Spring每一次获取就会创建一个新的实例，一般action都使用原型模式</li>\n</ol>\n</li>\n<li>Web项目的生命周期，session，request等</li>\n</ol>\n</li>\n<li><p>Spring可以将内存空间的创建和内存空间的赋值分离开来。</p>\n</li>\n<li><p>Spring加载配置文件的方式</p>\n<ol>\n<li><p>Java项目</p>\n<ol>\n<li>FileSystemXmlApplicationContext() </li>\n<li><p>ClassPathXmlApplicationContext() （推荐）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 加载配置文件</div><div class=\"line\">ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</div><div class=\"line\"></div><div class=\"line\">LoginBL p = (LoginBL)ac.getBean(&quot;loginBL&quot;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Web项目</p>\n</li>\n</ol>\n</li>\n<li><p>实际工作中的Spring-IoC的实现方式</p>\n<ul>\n<li><p>接口注入 + get/set方法的注入 + 手工匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">// DAO接口</div><div class=\"line\">public interface LoginDAO &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic int login(String uname, String uwrod) throws Exception;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// DAO接口的实现类</div><div class=\"line\">public class LoginDAOImpl implements LoginDAO &#123;</div><div class=\"line\"></div><div class=\"line\">\t@override</div><div class=\"line\">\tpublic int login(String uname, String uwrod) &#123;</div><div class=\"line\">\t\t....</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">&#125;</div><div class=\"line\">// Service接口</div><div class=\"line\">public interface LoginBL &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic int login(String uname, String uword) throws Exception;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">// Service接口的实现类</div><div class=\"line\">public class LoginBLImpl implements LoginBL &#123;</div><div class=\"line\"></div><div class=\"line\">\t//\t接口注入</div><div class=\"line\">\tprivate LoginDAO loginDao;</div><div class=\"line\"></div><div class=\"line\">\t@override</div><div class=\"line\">\tpublic int login(String uname, String uword) throws Exception &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\treturn this.loginDao.login(uname,uword);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic LoginDAO getLoginDao() &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\treturn loginDao;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void setLoginDao(LoginDAO loginDao) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tthis.loginDao = loginDao;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">// Test测试类</div><div class=\"line\">public class test &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate LoginBL loginBl;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate String uname;</div><div class=\"line\">\tprivate String uword;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(Stirng[] args) &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tloginBl.login(uname,uword);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tApplicationContext ac = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</div><div class=\"line\">\t\tLoginBL p = (LoginBL)ac.getBean(&quot;loginBL&quot;);</div><div class=\"line\">\t\tSystem.out.println(p);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Spring配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">\t\t</div><div class=\"line\">&lt;bean id=&quot;loginDAO&quot; class=&quot;com.dao.impl.LoginDAOImpl&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;bean id=&quot;loginBL&quot; class=&quot;com.service.impl.LoginBLImpl&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;property name=&quot;loginDao&quot; ref=&quot;loginDAO&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<hr>\n<h3 id=\"bean标签\"><a href=\"#bean标签\" class=\"headerlink\" title=\"bean标签\"></a>bean标签</h3><ul>\n<li>bean标签开辟空间，创建对象</li>\n<li><p>应该采用id或者name属性标识一个bean。</p>\n</li>\n<li><p>Person类</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.bean.Person</div><div class=\"line\">\t</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate String name;</div><div class=\"line\">\tprivate int age;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic String getName() &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void setName() &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic String getAge() &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void setAge() &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Demo类</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.bean.Demo</div><div class=\"line\">\t</div><div class=\"line\">public class Demo &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate String title;</div><div class=\"line\">\tprivate Demo demo;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic Demo() &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic Demo(Demo demo) &#123;</div><div class=\"line\">\t\tthis.demo = demo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic String getTitle() &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void setTitle() &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Spring配置文件之get/set注入、构造函数注入</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">&lt;!-- set/get方式 id与属性的手工匹配， 常用 --&gt;</div><div class=\"line\">&lt;bean id=&quot;xxx&quot; class=&quot;com.bean.Demo&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;property name=&quot;title&quot; value=&quot;hello&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">\t</div><div class=\"line\">&lt;bean id=&quot;person&quot; class=&quot;com.bean.Person&quot; scope=&quot;&quot;&gt; </div><div class=\"line\"></div><div class=\"line\">\t&lt;property name=&quot;name&quot; value=&quot;King&quot; /&gt;</div><div class=\"line\">\t&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class=\"line\">\t&lt;property name=&quot;title&quot; ref=&quot;xxx&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;!-- 构造函数方式，bean的class属性和成员变量的自动匹配 不常用 --&gt;</div><div class=\"line\">&lt;bean id=&quot;xxx&quot; class=&quot;com.bean.Demo&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;property name=&quot;title&quot; value=&quot;hello&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">\t</div><div class=\"line\">&lt;bean id=&quot;person&quot; class=&quot;com.bean.Person&quot; autowire=&quot;constructor&quot;&gt; </div><div class=\"line\"></div><div class=\"line\">\t&lt;property name=&quot;name&quot; value=&quot;King&quot; /&gt;</div><div class=\"line\">\t&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["后端"],"tags":["Spring"]},{"title":"应用软件开发流程（学习笔记）","url":"http://yoursite.com/2017/03/22/软件开发流程学习笔记/","content":"<ul>\n<li><p>软件分类</p>\n<ul>\n<li>系统软件<ul>\n<li>系统软件处于 计算机架构的底层，为计算机应用提供通用的基本功能。例如各个计算机系统。</li>\n</ul>\n</li>\n<li>中间件（Middleware）<ul>\n<li>处于系统软件和用户的应用软件之间，通常运行于客户机——服务器架构软件系统的服务器端操作系统之上，为处于其上层的应用软件提供运行环境。</li>\n</ul>\n</li>\n<li>应用软件 <ul>\n<li>针对不同的用户需求或者业务领域提供有针对性的功能。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>俗话说得好：有思路才有出路，对待任何问题我们都有分析问题的方法和解决问题的手段。</p>\n</li>\n<li>软件开发流程就是软件的设计思路和方法的具体过程。</li>\n<li>三阶段<ul>\n<li>需求分析阶段<ul>\n<li>调研</li>\n<li>用户个性化需求文档 </li>\n</ul>\n</li>\n<li>设计开发阶段<ul>\n<li>设计 <ul>\n<li>概要设计</li>\n<li>详细设计</li>\n</ul>\n</li>\n<li>团队协作分工</li>\n<li>编码</li>\n<li>各项指标测试 </li>\n</ul>\n</li>\n<li>软件维护阶段<ul>\n<li>部署</li>\n<li>维护</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>三阶段（详细分析）</p>\n<ul>\n<li>需求分析阶段（20%）<ul>\n<li>完成用户需求文档，跟用户反复沟通，明确用户需要什么，我们需要做的是什么，最终完成书面文档并让客户予以确认，作为合同和开发的依据。</li>\n<li>阶段里程碑：<code>用户需求文档</code></li>\n</ul>\n</li>\n<li>设计开发阶段（70%）<ul>\n<li>概要设计<ul>\n<li>系统模块划分</li>\n<li>确认各模块的功能</li>\n<li>用户界面概要设计</li>\n<li>输入输出数据的概要设计</li>\n<li>报表概要设计</li>\n<li>数据之间的联系、流程分析</li>\n<li>数据库的逻辑设计</li>\n<li>软件开发环境的确认</li>\n<li>UML图</li>\n</ul>\n</li>\n<li>详细设计<ul>\n<li>数据库的物理设计</li>\n<li>数据的输入、输出的方案设计</li>\n<li>对各模块或子系统的处理方式以及内容进行细化设计</li>\n<li>关键业务的流程图等</li>\n</ul>\n</li>\n<li>编码 <ul>\n<li>团队的组建，任务划分、模块的深入理解</li>\n<li>设计界面、编写代码</li>\n<li>进行模块内功能的测试、单元测试</li>\n<li>修改模块反馈的错误 </li>\n</ul>\n</li>\n<li>阶段里程碑：<code>概要设计文档、详细设计文档、系统编码版本</code></li>\n</ul>\n</li>\n<li><p>软件维护阶段 （10%）</p>\n<ul>\n<li>测试、部署</li>\n<li>用户手册</li>\n<li>阶段里程碑：<code>验收通过</code></li>\n</ul>\n<img src=\"/2017/03/22/软件开发流程学习笔记/IT.jpg\" alt=\"IT.jpg\" title=\"\"></li>\n</ul>\n</li>\n</ul>\n","categories":["前端"],"tags":["软件开发"]},{"title":"SSM框架整合","url":"http://yoursite.com/2017/03/19/SSM框架整合/","content":"<h3 id=\"整合说明\"><a href=\"#整合说明\" class=\"headerlink\" title=\"整合说明\"></a>整合说明</h3><ul>\n<li>springmvc是spring的子框架，不用进行整合<ul>\n<li>配置文件为 springmvc-servlet.xml</li>\n</ul>\n</li>\n<li><p>spring和mybatis是需要整合的，最主要的！</p>\n<ul>\n<li>配置文件，将原本的application.xml拆分为三部分好方便管理。<ul>\n<li>applicationContext-dao.xml</li>\n<li>aapplicationContext-service.xml</li>\n<li>applicationContext-transaction.xml</li>\n</ul>\n</li>\n<li>你会发现mybatis的配置文件sqlMapConfig.xml里面的配置基本都转移了。</li>\n</ul>\n</li>\n<li><p>版本</p>\n<ul>\n<li>springmvc 4.3.5</li>\n<li>spring 4.3.5</li>\n<li>mybatis 3.3.0</li>\n</ul>\n</li>\n<li><p>相关jar包下载地址 </p>\n<ul>\n<li><a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"external\">http://search.maven.org/</a></li>\n<li><a href=\"http://maven.springframework.org/release/org/springframework/spring/\" target=\"_blank\" rel=\"external\">http://maven.springframework.org/release/org/springframework/spring/</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入相关Jar包\"><a href=\"#导入相关Jar包\" class=\"headerlink\" title=\"导入相关Jar包\"></a>导入相关Jar包</h3><ul>\n<li>相关jar包，简单说一些<ul>\n<li>springmvc和spring类<ul>\n<li>spring-aop</li>\n<li>spring-beans</li>\n<li>spring-core Spring核心</li>\n<li>spring-webmvc-4.3.5 SpringMCV核心</li>\n<li>……</li>\n</ul>\n</li>\n<li>mybatis类<ul>\n<li>mybatis-3.3.0 Mybatis核心</li>\n<li>mybatis-spring-1.3.1 用于整合Spring和Mybatis</li>\n</ul>\n</li>\n<li>commons类<ul>\n<li>commom-dbcp2-2.1.1 common数据源第二版本</li>\n<li>common-pool2-2.4.2</li>\n<li>common-logging-1.2</li>\n<li>……</li>\n</ul>\n</li>\n<li>mysql类<ul>\n<li>mysql-connector-java-5.1.7 连接MySQL</li>\n</ul>\n</li>\n<li>log4j类<ul>\n<li>log4j-1.2.17 日志输出</li>\n<li>log4j-api-2.2</li>\n<li>log4j-core-2.2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h3><img src=\"/2017/03/19/SSM框架整合/SSM.png\" alt=\"SSM.png\" title=\"\">\n<ul>\n<li>controller 为控制器</li>\n<li>mapper 里面写mapper.xml和mapper.java</li>\n<li>pojo 为数据模型层</li>\n<li>service 为业务接口层</li>\n<li>serviceImpl 为业务实现层</li>\n<li>test 测试</li>\n</ul>\n<h3 id=\"框架整合配置文件详细说明\"><a href=\"#框架整合配置文件详细说明\" class=\"headerlink\" title=\"框架整合配置文件详细说明\"></a>框架整合配置文件详细说明</h3><ul>\n<li><p>整合Web项目和Spring，需要在web.xml中配置。通过监听器，实现框架的整合（在监听器中，实现了Spring框架的初始化设置）</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;content-param&gt;</div><div class=\"line\">\t&lt;description&gt;设置Spring配置文件的位置&lt;/description&gt;</div><div class=\"line\">\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class=\"line\">\t&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</div><div class=\"line\">&lt;/content-param&gt;</div><div class=\"line\">&lt;!-- 这里classpath：后面你需要填写的Spring配置文件的位置，这里这样写是因为Spring的配置文件直接放在src根目录下 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;listener&gt;</div><div class=\"line\">\t&lt;description&gt;加载Spring配置文件，并执行初始化操作&lt;/description&gt;</div><div class=\"line\">\t&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class=\"line\">&lt;/listener&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>整合Web项目和SpringMVC，需要在web.xml中配置。通过一个servlet实现框架的整合。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;</div><div class=\"line\">   &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class=\"line\">   &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class=\"line\"> \t\t\t&lt;init-param&gt;</div><div class=\"line\">      &lt;!-- override default name &#123;servlet-name&#125;-servlet.xml --&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class=\"line\">      &lt;param-value&gt;classpath:/WEB-INF/springmvc-servlet.xml&lt;/param-value&gt;</div><div class=\"line\">      </div><div class=\"line\"> \t\t\t&lt;/init-param&gt;</div><div class=\"line\"> \t\t\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">&lt;/servlet&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Web项目和Spring、SpringMVC整合完毕了。那么，现在来看看Spring和SpringMVC的整合。</p>\n</li>\n<li><p>前面说过，SpringMVC是Spring的子框架，那么整合的事情看起来是如此和谐，需要的配置文件就是上面的<code>&lt;param-value&gt;classpath:/WEB-INF/springmvc-servlet.xml&lt;/param-value&gt;</code>中所包含的springmvc-servlet.xml。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- </div><div class=\"line\">\t配置自动扫描，之前需要将各种bean利用id和ref属性手动来关联起来，这是十分繁杂的。</div><div class=\"line\">\t现在，我们只需要利用Spring提供的自动扫描，即可轻松解决。</div><div class=\"line\">\tbase-package是指明需要扫描的包，Spring将扫描该文件夹，并找出Bean（注解为@Component）</div><div class=\"line\">\t并注册到Spring容器中。</div><div class=\"line\">\t在Spring中，有4中种类型的组件自动扫描注解类型</div><div class=\"line\">\t1.@Component：自动扫描组件</div><div class=\"line\">\t2.@Repository：持久层DAO组件</div><div class=\"line\">\t3.@Service：业务层组件</div><div class=\"line\">\t4.@Controller：表示层控制器组件</div><div class=\"line\">--&gt;</div><div class=\"line\">&lt;context:component-scan base-package=&quot;&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.1&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;display-name&gt;SpringMCVSpringMybatis&lt;/display-name&gt;</div><div class=\"line\">  </div><div class=\"line\">    &lt;!-- 整合Web项目和Spring --&gt;</div><div class=\"line\">  \t&lt;context-param&gt;</div><div class=\"line\">  \t\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class=\"line\">  \t\t&lt;param-value&gt;classpath:/WEB-INF/classes/spring/applicationContext-*.xml&lt;/param-value&gt;</div><div class=\"line\">  \t&lt;/context-param&gt;</div><div class=\"line\">  </div><div class=\"line\">\t&lt;listener&gt;</div><div class=\"line\">\t  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class=\"line\">\t&lt;/listener&gt;</div><div class=\"line\">  </div><div class=\"line\">  \t&lt;!-- 防止Spring内存溢出 --&gt;  </div><div class=\"line\">    &lt;listener&gt;  </div><div class=\"line\">        &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;  </div><div class=\"line\">    &lt;/listener&gt; </div><div class=\"line\">    </div><div class=\"line\">    &lt;!-- spring框架提供的字符集过滤器 --&gt;</div><div class=\"line\">  \t&lt;!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题  --&gt;</div><div class=\"line\">  \t&lt;filter&gt;  </div><div class=\"line\">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;  </div><div class=\"line\">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;  </div><div class=\"line\">        &lt;init-param&gt;  </div><div class=\"line\">            &lt;param-name&gt;encoding&lt;/param-name&gt;  </div><div class=\"line\">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;  </div><div class=\"line\">        &lt;/init-param&gt;  </div><div class=\"line\">        &lt;init-param&gt;  </div><div class=\"line\">            &lt;param-name&gt;forceEncoding&lt;/param-name&gt;  </div><div class=\"line\">            &lt;param-value&gt;true&lt;/param-value&gt;  </div><div class=\"line\">        &lt;/init-param&gt;  </div><div class=\"line\">    &lt;/filter&gt;  </div><div class=\"line\">    &lt;filter-mapping&gt;  </div><div class=\"line\">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;  </div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </div><div class=\"line\">    &lt;/filter-mapping&gt; </div><div class=\"line\">  </div><div class=\"line\">  \t&lt;!-- 配置springmvc的前端控制器 DispatchcerServlet --&gt;</div><div class=\"line\">\t&lt;servlet&gt;</div><div class=\"line\">\t  \t&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class=\"line\">\t  \t&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class=\"line\">\t  \t&lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class=\"line\">            &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</div><div class=\"line\">        &lt;/init-param&gt;</div><div class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">\t&lt;/servlet&gt;</div><div class=\"line\">\t  &lt;!-- </div><div class=\"line\">        \t默认情况下：DispatcherServlet会寻找WEB-INF下，命名规范为springmvc-servlet.xml文件。</div><div class=\"line\">        \t如果需要修改springmvc配置文件的名称和位置，需要在web.xml中的&lt;servlet /&gt;标记中增加 </div><div class=\"line\">        \t&lt;init-param&gt;&lt;/init-param&gt;：</div><div class=\"line\">        --&gt;</div><div class=\"line\">\t &lt;servlet-mapping&gt;</div><div class=\"line\">\t  \t&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class=\"line\">\t  \t&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</div><div class=\"line\">\t &lt;/servlet-mapping&gt;</div><div class=\"line\">\t  </div><div class=\"line\">\t  </div><div class=\"line\">\t &lt;welcome-file-list&gt;</div><div class=\"line\">\t    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class=\"line\">\t &lt;/welcome-file-list&gt;</div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>springmvc-servlet.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</div><div class=\"line\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</div><div class=\"line\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t&lt;!-- 配置注解驱动 --&gt;</div><div class=\"line\">\t&lt;mvc:annotation-driven/&gt;</div><div class=\"line\">\t&lt;!-- 配置扫描器 --&gt;</div><div class=\"line\">\t&lt;context:component-scan base-package=&quot;com/&quot; /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;!-- 配置视图解析器 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;prefix&quot; value=&quot;/view/&quot; /&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</div><div class=\"line\">\t&lt;/bean&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;!-- 从请求和响应读取/编写字符串 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;stringHttpMessage&quot; class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;supportedMediaTypes&quot;&gt;</div><div class=\"line\">\t\t\t&lt;list&gt;</div><div class=\"line\">\t\t\t\t&lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;</div><div class=\"line\">\t\t\t&lt;/list&gt;</div><div class=\"line\">\t\t&lt;/property&gt;</div><div class=\"line\">\t&lt;/bean&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;!-- 用于将对象转化为JSON --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;jsonConverter&quot; class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">\t&lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;messageConverters&quot;&gt;</div><div class=\"line\">\t\t\t&lt;list&gt;</div><div class=\"line\">\t\t\t\t&lt;ref bean=&quot;stringHttpMessage&quot;/&gt;</div><div class=\"line\">\t\t\t\t&lt;ref bean=&quot;jsonConverter&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;/list&gt;</div><div class=\"line\">\t\t&lt;/property&gt;</div><div class=\"line\">\t&lt;/bean&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;!-- 静态资源处理 --&gt;</div><div class=\"line\">    &lt;mvc:resources location=&quot;/common/&quot; mapping=&quot;/common/**&quot;&gt;&lt;/mvc:resources&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>applicationContext-dao.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\txmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.3.xsd &quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">    </div><div class=\"line\">        </div><div class=\"line\">\t&lt;!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 --&gt;</div><div class=\"line\">\t&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;!-- 配置数据源，dbcp连接池 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;iLoveMysql&quot;  class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot; destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; </div><div class=\"line\">        &lt;property name=&quot;maxIdle&quot; value=&quot;5&quot; /&gt; </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\"> </div><div class=\"line\">\t&lt;!-- sqlsessionfactory配置，集成mybatis --&gt; </div><div class=\"line\">\t&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\">\t\t&lt;!-- 数据库连接池 --&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;iLoveMysql&quot; /&gt;</div><div class=\"line\">\t\t&lt;!-- 加载mybatis的全局配置文件 --&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis/SqlMapConfig.xml&quot; /&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.hdu.pojo&quot; /&gt;</div><div class=\"line\">\t&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;!-- mapper扫描器 --&gt;</div><div class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</div><div class=\"line\">\t\t&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;basePackage&quot; value=&quot;com.hdu.mapper&quot; /&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;</div><div class=\"line\">\t&lt;/bean&gt;\t</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>applicationContext-service.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\txmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.3.xsd &quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\"> \t&lt;!-- 自动扫描业务包 --&gt;</div><div class=\"line\"> \t&lt;context:component-scan base-package=&quot;com.hdu.serviceImpl&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>applicationContext-transaction.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\txmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc </div><div class=\"line\">\t\thttp://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop </div><div class=\"line\">\t\thttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx </div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.3.xsd &quot;&gt;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&lt;!-- 事务未配置，不影响框架整合 --&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>db.properties(数据库连接配置)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</div><div class=\"line\">jdbc.url=jdbc\\:mysql\\://localhost\\:3306/filesystem</div><div class=\"line\">jdbc.username=root</div><div class=\"line\">jdbc.password=root</div></pre></td></tr></table></figure>\n<ul>\n<li>log4j.properties(日志配置)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">log4j.rootCategory=INFO, stdout</div><div class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %t %c&#123;2&#125;:%L - %m%n</div><div class=\"line\">log4j.category.org.springframework.beans.factory=DEBUG</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>SSM框架目前是比较流行的，有轻量，简洁，快速等特点。</li>\n<li>在接口的实现类上，一般要用加上@Service注解，这样才能使用@Autowired来注入接口。</li>\n</ul>\n","categories":["后端"],"tags":["Spring","SpringMVC","Mybatis"]},{"title":"Tomcat Mac安装版","url":"http://yoursite.com/2017/01/05/Tomcat-Mac安装版/","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>安装步骤<ol>\n<li>首先官网下载Tomcat.zip</li>\n<li>将解压的tomcat文件夹放入 /usr/local 中</li>\n<li>修改文件权限，分别是 /usr/local/tomcat/bin 目录下的<ul>\n<li>startup.sh </li>\n<li>catalina.sh<ul>\n<li>执行命令 <ul>\n<li>sudo chmod 775 startup.sh</li>\n<li>sudo chmod 775 catalina.sh</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>启动tomcat，在 /usr/local/tomcat/bin 执行命令 sudo sh ./startup.sh</li>\n<li>关闭tomcat，在 /usr/local/tomcat/bin 执行命令 sudo sh ./shutdown.sh</li>\n<li>在浏览器中输入 localhost:8080 便可知是否成功</li>\n<li>参考链接<ul>\n<li><a href=\"http://www.jianshu.com/p/db08d23049ce\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/db08d23049ce</a></li>\n<li><a href=\"http://m.jb51.net/article/94201.htm\" target=\"_blank\" rel=\"external\">http://m.jb51.net/article/94201.htm</a></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"在myecplise2017中配置Tomcat\"><a href=\"#在myecplise2017中配置Tomcat\" class=\"headerlink\" title=\"在myecplise2017中配置Tomcat\"></a>在myecplise2017中配置Tomcat</h3><ul>\n<li>打开设置</li>\n</ul>\n<img src=\"/2017/01/05/Tomcat-Mac安装版/step1.png\" alt=\"step1.png\" title=\"\">\n<ul>\n<li>看到上图中，点击右边的add按钮，则会看到如下的部分</li>\n</ul>\n<img src=\"/2017/01/05/Tomcat-Mac安装版/step2.png\" alt=\"step2.png\" title=\"\">\n<ul>\n<li>一定要把 create a new local server 勾选上，点击next</li>\n</ul>\n<img src=\"/2017/01/05/Tomcat-Mac安装版/step3.png\" alt=\"step3.png\" title=\"\">\n<ul>\n<li>这里把 Tomcat installation directory 填上，就是你安装tomcat的目录（/usr/local/tomcat）填好之后，就可以了，你回到MyEclipse之后就会发现，Tomcat服务器就已经安装好了。</li>\n</ul>\n<img src=\"/2017/01/05/Tomcat-Mac安装版/step4.png\" alt=\"step4.png\" title=\"\">","categories":["后端"],"tags":["Tomcat"]},{"title":"Fetch大法","url":"http://yoursite.com/2016/11/22/Fetch大法/","content":"<p>###初始读书整理</p>\n<ul>\n<li>IE8+ 以上的浏览器，运行可行</li>\n<li>Fetch API 基于 Promise 设计</li>\n<li>传统的 XMLHttpRequest 是一个设计粗燥的 API，不关注分离原则。</li>\n</ul>\n<ul>\n<li><p>Fetch 优点主要有：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>同构方便，使用 isomorphic-fetch</li>\n</ul>\n</li>\n<li><p>Fetch API提供了一个fetch()方法，它被定义在BOM的window对象中，你可以用它来发起对远程资源的请求。 该方法返回的是一个Promise对象，让你能够对请求的返回结果进行检索。</p>\n</li>\n</ul>\n","categories":["前端"],"tags":[]},{"title":"SVN","url":"http://yoursite.com/2016/11/16/SVN/","content":"<p>###SVN基本命令</p>\n<ul>\n<li>首先从服务器上下载项目，<code>svn co [项目下载地址] --username [用户名] —-password [密码]</code>，示例：<code>svn co svn://192.168.1.100/saas/kite/customer/junyikang-app —username tengshaowei —password tsw2044</code></li>\n<li>从服务器上下载更新到本地项目，<code>svn update</code>，在项目根目录下使用这个命令即可。</li>\n<li>查看当前的项目文件状态，<code>svn status</code>，会展示出相应文件的增删改查等状态。</li>\n<li>查看项目情况，<code>svn info</code>，这些都是很有用的命令。</li>\n<li>提交更新到服务器，<code>svn commit -m &#39;update&#39;</code>，这会提交本地项目更新到服务器，但是，无法更新新增的东西，因为那些东西未加入版本控制系统，所以需要使用命令<code>svn add xx.xx</code>来加入某某文件。</li>\n<li>合并冲突，<code>svn merge</code></li>\n</ul>\n","categories":["开发工具"],"tags":[]},{"title":"ionic-iOS开发说明","url":"http://yoursite.com/2016/11/11/ionic-开发/","content":"<p>###基本Ionic环境搭建</p>\n<ul>\n<li>基于node环境，使用npm来安装环境，首先需要安装node。</li>\n<li><code>npm install -g ionic</code></li>\n<li><code>npm install -g cordova</code></li>\n<li><code>ionic info</code>，这个会显示出当前所有的ionic环境搭建情况。</li>\n</ul>\n<p>###开始一个新的Ionic项目</p>\n<ul>\n<li>官网提供了几个示例项目如：tabs、sidemenu等。</li>\n<li>开始官方的示例项目：<code>ionic start [myProjectName] [tabs/sidemenu]</code>，这样会从github下载示例代码。</li>\n<li>开始自己的新项目：<code>ionic start [自己的工程名] blank</code>，blank表示空白模版，这样会从github下载空白模版。</li>\n<li>大致会生成如下内容</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">hooks           //google之后这个目录应该是在编译cordova时自定义的脚本命令，方便整合到我们的编译系统和版本控制系统中</div><div class=\"line\">plugins         //cordova插件的目录，插件的安装下一节详述</div><div class=\"line\">scss            //scss文件，发布时编译这个目录下的文件输出到www的css目录中</div><div class=\"line\">www             //我们的开发目录，页面、样式、脚本和图片都放在这个目录下</div><div class=\"line\">\t--css</div><div class=\"line\">\t--img</div><div class=\"line\">\t--js</div><div class=\"line\">\t--lib</div><div class=\"line\">\t--index.html //作为我们的程序入口文件，首先编辑这个文件</div><div class=\"line\">bower.json      //bower配置文件</div><div class=\"line\">config.xml      //Ionic的配置文件 ⱃ可以配置app的id，名称、描述起始页和一起其他配置</div><div class=\"line\">gulpfile.js     //gulp构建工具的执行文件，在这个文件中创建任务实现编译scss，css、js优化等</div><div class=\"line\">ionic.project   //Ionic的项目文件可以配置Ionic命令中livereload的监控文件</div><div class=\"line\">package.json    //npm配置文件</div></pre></td></tr></table></figure>\n<img src=\"/2016/11/11/ionic-开发/ionic项目目录结构.png\" alt=\"ionic项目目录结构.png\" title=\"\">\n<p>###运行Ionic项目</p>\n<ul>\n<li>切换到项目目录，也就是[myProjectName]目录：cd [myProjectName]</li>\n<li>构建平台：<code>ionic platform add ios／android</code>，如果遇见问题，可以先使用：<code>ionic hooks add</code></li>\n<li>移除平台：<code>ionic platform remove ios／android</code></li>\n<li>编译：<code>ionic build ios／android</code></li>\n<li>开始编译项目，编译完成之后用Xcode打开开发目录下platform-&gt;ios-&gt;myIonic.xcodeproj的项目文件，Xcode中选择要运行的虚拟机版本并执行快捷键cmd+R运行虚拟机，虚拟机打开后会自动运行你应用。</li>\n</ul>\n<p>###Ionic项目编码</p>\n<ul>\n<li>www／index.html是程序入口文件，Ionic针对移动端自定义了一套样式库，并且使用Angular的指令封装了各个模块。在index.html中调用插件的方法需要引入这两个js文件，<code>&lt;script type=&quot;text/javascript&quot; src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script type=&quot;text/javascript&quot; src=&quot;cordova_plugins.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n<p>###Cordova插件</p>\n<ul>\n<li>Cordova插件开发步骤</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、首先构建一个目录，如下</div><div class=\"line\">\tplugins</div><div class=\"line\">\t\t|</div><div class=\"line\">\t\t|—— justalk</div><div class=\"line\">\t\t\t\t|</div><div class=\"line\">\t\t\t\t|——plugin.xml(配置文件）</div><div class=\"line\">\t\t\t\t|</div><div class=\"line\">\t\t\t\t|——src(对应不同的平台)</div><div class=\"line\">\t\t\t\t|\t |</div><div class=\"line\">\t\t\t\t|\t |——android</div><div class=\"line\">\t\t\t\t|\t |\t\t|</div><div class=\"line\">\t\t\t\t|\t |\t\t|——JustCall.java</div><div class=\"line\">\t\t\t\t|\t |——ios</div><div class=\"line\">\t\t\t\t|\t \t  |</div><div class=\"line\">\t\t\t\t|\t \t  |——JustCall.h</div><div class=\"line\">\t\t\t\t|\t \t  |——JustCall.m</div><div class=\"line\">\t\t\t\t|</div><div class=\"line\">\t\t\t\t|——www</div><div class=\"line\">\t\t\t\t\t|</div><div class=\"line\">\t\t\t\t\t|——justalk.js</div></pre></td></tr></table></figure>\n<ul>\n<li><p>plugin.xml(配置文件)</p>\n<ul>\n<li><p>关键标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;js-module name=&quot;JustalkPlugin&quot; src=&quot;www/justalk.js&quot;&gt; </div><div class=\"line\">\t&lt;clobbers target=&quot;justalk&quot; /&gt; </div><div class=\"line\">&lt;/js-module&gt;</div><div class=\"line\">name是插件名，src指向www目录下的js文件，target定义一个调用js文件中方法的对象。</div></pre></td></tr></table></figure>\n</li>\n<li><p>关键标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;platform name=&quot;ios&quot;&gt; //表明是iOS平台</div><div class=\"line\"></div><div class=\"line\">\t&lt;config-file target=&quot;config.xml&quot; parent=&quot;/*&quot;&gt;</div><div class=\"line\">\t// target 和 parent 在iOS平台可以直接这样写</div><div class=\"line\">\t\t&lt;feature name=&quot;justalk&quot;&gt;</div><div class=\"line\">\t\t\t&lt;param name=&quot;ios-package&quot; value=&quot;JustCall&quot; /&gt;</div><div class=\"line\">\t\t&lt;feature&gt;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&lt;config-file&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;header-file src=&quot;src/ios/JustCall.h&quot;  /&gt;</div><div class=\"line\">\t&lt;source-file src=&quot;src/ios/JustCall.m&quot;  /&gt;</div><div class=\"line\">\t// 区别于android，iOS没有target-dir属性</div><div class=\"line\"></div><div class=\"line\">&lt;/platform&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>src中编码底层文件，定义方法，并与www/justalk.js中的方法对应起来。</p>\n</li>\n<li><p>www/justalk.js</p>\n<ul>\n<li>在这里写上JS方法，并暴露给web工程使用，使用CommonJS规范编码。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>插件编码完成后，就是使用命令行来生成Cordova插件<ul>\n<li>首先切换到工程目录，使用命令：<code>cordova plugin add [插件的绝对路径]</code></li>\n<li>在工程目录下移除插件：<code>cordova plugin remove [插件名]</code></li>\n</ul>\n</li>\n</ul>\n<p>###Xcode专题</p>\n<ul>\n<li><code>ionic build ios</code> 运行之后，会编译出Xcode使用的文件（xxx.xcodeprej)，接着可以使用Mac系统上的Xcode来进行开发。</li>\n<li><code>ionic run ios</code>，会自动(重新)将www的部署到ios平台。</li>\n<li><p>Xcode的项目配置</p>\n<ul>\n<li>Framework，添加系统库，或者第三方静态库，比如xxx.framework、xxx.a、xxx.tbd等文件，都需要在<code>TARGETS-&gt;Build Phases</code>下的<code>Link Binary With Libraries</code>中添加，接着会在工程左侧的Frameworks目录显示出来。</li>\n<li>Bundle文件，里面打包了许多资源文件，SDK有时会携带这样的文件，可以直接将其添加到Frameworks目录下，在Frameworks目录上右键点击，选择<code>Add Files to ...</code>，即可。那么会在<code>TARGETS-&gt;Build Phases</code>下的<code>Copy Bundle Resources</code>中显示出来。</li>\n<li>Prefix.pch文件，可以用来存储共享信息，比如设备屏幕的宽度，高度，版本号等等公用信息。如果添加了这个文件，那么需要在<code>TARGETS-&gt;Build Settings-&gt;Apple LLVM8.0-Language</code>中设置<code>Precompile Prefix Header</code> 和 <code>Prefix Header</code></li>\n<li>如果添加了库文件，头文件，lib文件，需要设置<code>TARGETS-&gt;Build Settings-&gt;Search Paths</code>下的<code>Framework Search Paths</code> 、 <code>Header Search Paths</code> 和 <code>Library Search Paths</code>。一般使用定义宏来编写路径，方便运行在其他电脑环境。比如<code>$(PROJECT_DIR)</code>表示当前平台目录路径。</li>\n<li>其他重要配置项：<code>TARGETS-&gt;Apple LLVM8.0 - Preprocessing</code>下的<code>Preprocessor Macros</code>，可以将其设置为<code>DEBUG=1 ZPLATFORM=ZPLATFORM_IOS OPENSSL_CONF_FILE_IOS_ARM64</code>；<code>TARGETS-&gt;General-&gt;Deployment Info</code>下的<code>Deployment Target</code>设置为较低的版本，同时与<code>PROJECT-&gt;Info-&gt;Deployment Target</code>下的<code>iOS Deployment Target</code>保持一致。</li>\n</ul>\n</li>\n<li><p>注意，在Xcode中有些是目录不是真实存在的，只是一个虚拟目录，仅仅表示引用。</p>\n</li>\n<li>关于程序不能运行时不能全屏的问题分析解决：构建IOS程序时，是使用xib作为启动页面的，但是xib只能使用在Xcode8.0以上的系统，以前的系统还是需要在lanchImage里面设置启动图片，而且启动图片还需要分为不同的倍图和对应的设备。重点：在工程找到<code>Images.xcassets</code>这个文件夹，Finder中去查看，便会发现其中有许多的图片文件，这真是各个分辨率需要使用的。如果没有，请生成，并加入到其中。如果有了的话，你在Xcode中点击这个文件夹，你会发现右侧中会点亮相应的图框，表示已经添加了的不同分辨率的图片。接着，还需要在工程中设置，进入到这里<code>TARGETS-&gt;General-&gt;App Icons and Launch Images</code>下的 <code>Lacnch Images Source</code>选项添加这个Image即可。</li>\n<li>关于IOS的头部区域占用页面20px的问题，只需要在app.js中添加<code>ionic.platform.fullScreen()</code>即可，具体请 <a href=\"https://forum.ionicframework.com/t/ios-header-size-is-too-large/16127/4\" target=\"_blank\" rel=\"external\">点击这里</a></li>\n<li>关于IOS程序WEB页面调试的方法，详情请 <a href=\"http://stackoverflow.com/questions/11262236/ios-remote-debugging\" target=\"_blank\" rel=\"external\">点击这里</a></li>\n</ul>\n<p>###更新</p>\n<ul>\n<li>在www目录下的index.html是主要的入口文件，里面是这样的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;&gt;</div><div class=\"line\">    &lt;title&gt;&lt;/title&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;!-- un-comment this code to enable service worker</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">      if (&apos;serviceWorker&apos; in navigator) &#123;</div><div class=\"line\">        navigator.serviceWorker.register(&apos;service-worker.js&apos;)</div><div class=\"line\">          .then(() =&gt; console.log(&apos;service worker installed&apos;))</div><div class=\"line\">          .catch(err =&gt; console.log(&apos;Error&apos;, err));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &lt;/script&gt;--&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;link href=&quot;lib/ionic/css/ionic.css&quot; rel=&quot;stylesheet&quot;&gt;</div><div class=\"line\">    &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- IF using Sass (run gulp sass first), then uncomment below and remove the CSS includes above</div><div class=\"line\">    &lt;link href=&quot;css/ionic.app.css&quot; rel=&quot;stylesheet&quot;&gt;</div><div class=\"line\">    --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- ionic/angularjs js --&gt;</div><div class=\"line\">    &lt;script src=&quot;lib/ionic/js/jquery/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;lib/ionic/js/ionic.bundle.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;lib/ionic/js/angular/angular-cookies.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- cordova script (this will be a 404 during development) --&gt;</div><div class=\"line\">    &lt;!--&lt;script src=&quot;cordova.js&quot;&gt;&lt;/script&gt; --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- your app&apos;s js --&gt;</div><div class=\"line\">    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;js/services.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;js/ajaxService.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;js/junyikang.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">\t   &lt;script src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">\t &lt;script src=&quot;cordova_plugins.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body ng-app=&quot;app&quot;&gt;</div><div class=\"line\">    &lt;!--</div><div class=\"line\">      The nav bar that will be updated as we navigate between views.</div><div class=\"line\">    --&gt;</div><div class=\"line\">    &lt;ion-nav-bar class=&quot;bar-positive&quot;&gt;</div><div class=\"line\">      &lt;ion-nav-back-button&gt;</div><div class=\"line\">      &lt;/ion-nav-back-button&gt;</div><div class=\"line\">    &lt;/ion-nav-bar&gt;</div><div class=\"line\">    &lt;!--</div><div class=\"line\">      The views will be rendered in the &lt;ion-nav-view&gt; directive below</div><div class=\"line\">      Templates are in the /templates folder (but you could also</div><div class=\"line\">      have templates inline in this html file if you&apos;d like).</div><div class=\"line\">    --&gt;</div><div class=\"line\">    &lt;ion-nav-view&gt;&lt;/ion-nav-view&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>在templates目录下的模版html会被渲染在 <code>&lt;ion-nav-view&gt;</code> 中</li>\n<li><code>&lt;ion-nav-bar&gt;</code>,会创建一个 topbar，我们可以在其中加上一个 回退的 button，类似这样，<code>&lt;ion-nav-bar&gt;&lt;ion-nav-back-button&gt;&lt;/ion-nav-back-button&gt;&lt;/ion-nav-bar&gt;</code></li>\n<li><code>&lt;ion-nav-back-button&gt;</code>不仅可以自定义样式，还可以自定义点击行为。</li>\n<li><code>&lt;ion-view&gt;</code>视图内容的容器，和一些导航信息。</li>\n<li><code>&lt;ion-content&gt;</code>可以控制页面，比如页面的滚动下拉等效果。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ion-content</div><div class=\"line\">[delegate-handle=&quot;&quot;]</div><div class=\"line\">[direction=&quot;&quot;]</div><div class=\"line\">[locking=&quot;&quot;]</div><div class=\"line\">[padding=&quot;&quot;]</div><div class=\"line\">[scroll=&quot;&quot;]</div><div class=\"line\">[overflow-scroll=&quot;&quot;]</div><div class=\"line\">[scrollbar-x=&quot;&quot;]</div><div class=\"line\">[scrollbar-y=&quot;&quot;]</div><div class=\"line\">[start-x=&quot;&quot;]</div><div class=\"line\">[start-y=&quot;&quot;]</div><div class=\"line\">[on-scroll=&quot;&quot;]</div><div class=\"line\">[on-scroll-complete=&quot;&quot;]</div><div class=\"line\">[has-bouncing=&quot;&quot;]</div><div class=\"line\">[scroll-event-interval=&quot;&quot;]&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;/ion-content&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>app.controller(controllerID, [arg..., function(arg...) { } ]);</code></li>\n</ul>\n<p>###APP语音功能</p>\n<ul>\n<li>cordova提供两个插件，cordova-plugin-media-capture和Cordova-plugin-media，Cordova-plugin-media-capture 是使用调用手机系统的录音软件，无法自定义UI；cordova-plugin-media 是调用原生代码，高度自定义。</li>\n<li>注意点，android 和 ios 的 <code>src</code> 的写法是不一样的，<code>src</code>使用<code>cordova.file.*</code>来写，但是，IOS是要去掉头部的<code>file://</code>这段字符串，<code>var src = cordova.file.tempDirectory.substring(7) + name +  &quot;.wav&quot;;</code></li>\n<li>android 和 iOS 的录音拓展名也是不同的，iOS只能是 <code>.wav</code>，android 是 <code>.amr</code>。</li>\n<li>录音上传时，使用 cordova-plugin-file-transfer 插件，但是上传的src必须使用<code>cordova.file.*</code>这种 Filesystem写法。</li>\n<li>还有一个问题，<code>.wav</code>文件太大，如何解决？</li>\n</ul>\n","categories":["前端"],"tags":[]},{"title":"React Native 入门","url":"http://yoursite.com/2016/10/28/React-Native-入门/","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"###概览\"></a>###概览</h2><img src=\"/2016/10/28/React-Native-入门/RN.jpg\" alt=\"RN.jpg\" title=\"\">\n<h2 id=\"Deco-IDE\"><a href=\"#Deco-IDE\" class=\"headerlink\" title=\"###Deco IDE\"></a>###Deco IDE</h2><ul>\n<li><p><a href=\"https://www.decosoftware.com/\" target=\"_blank\" rel=\"external\">Deco IDE 是什么？</a>The best IDE for building React Native apps is now free and open source.</p>\n</li>\n<li><p>实时显示出你的代码变化。Search for existing open-source React Native components to accelerate your development. Each component has a convenient thumbnail preview to help you find the right one.Then insert the component with one click and customize.</p>\n</li>\n<li><p>快速建立已经开源的组件，加速开发。Search for existing open-source React Native components to accelerate your development. Each component has a convenient thumbnail preview to help you find the right one.Then insert the component with one click and customize.</p>\n</li>\n<li><p>工程目录示例</p>\n<ul>\n<li>android/：在 Android Studio 打开你的项目或者构建项目所必须的文件。</li>\n<li>ios/：在 Xcode 打开你的项目或者构建项目所必须的文件。 </li>\n<li>node_modules/：你的 RN 项目运行所需要的NPM包。</li>\n<li>.flowconfig：如果你想要使用 FB 的 flow 语言（对JS进行静态检查），就需要使用这个配置文件。</li>\n<li>.watchmanconfig：FB 的 Watchman 的配置文件，检测 RN 的包。</li>\n<li>.gitignore：Default files for git to ignore。</li>\n<li>index.ios.js：在 iOS 上运行 RN App 的入口文件。</li>\n<li>index.android.js：在 Android 上运行 RN App 的入口文件。</li>\n<li>package.json：描述项目和罗列需要的 npm 包依赖。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2016/10/28/React-Native-入门/RNProject.png\" alt=\"RNProject.png\" title=\"\">\n<ul>\n<li><p>使用步骤</p>\n<ul>\n<li>Step 1: Download, install, and run Deco</li>\n<li>Step 2: Create a new project</li>\n<li>Step 3: Run iOS Simulator</li>\n<li>Step 4: Open index.ios.js</li>\n<li>Step 5: Insert component</li>\n<li>Step 6: Adjust properties</li>\n<li>Step 7: Have fun, and join our Slack channel!</li>\n</ul>\n</li>\n<li><p>什么是 Deco 组件？</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">组件是高度复用的 JSX 模版，Deco 能自动添加组件到项目。</div><div class=\"line\">有些组件需要 npm 依赖，Deco 会自动下载这些依赖和导入到你的代码中。</div><div class=\"line\">组件插入这种方式也可能含有可调的特性（自动添加到属性面板）。</div><div class=\"line\">插入组件有两种方式：1、直接拖拽组件到你的代码中。2、在搜索面板点击插入。</div><div class=\"line\">移除组件：The easiest way to remove a recently-added component is with undo ⌘+z. You will need to manually remove npm dependencies from your package.json. If undoing isn&apos;t possible, there are three places to check for related code you need to delete:</div><div class=\"line\"></div><div class=\"line\">In your JSX code, where you inserted the component&apos;s JSX</div><div class=\"line\">At the top of the file, you may need to remove any import statements that were added when the component was inserted</div><div class=\"line\">If any npm dependencies were installed when the component was inserted, remove them from the package.json.</div></pre></td></tr></table></figure>\n<ul>\n<li>模拟器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t1、开启 RN Packager，Deco 会自动开启 RN Packager 当你开启模拟器，你也可以手动开启。</div><div class=\"line\">当 Packager 运行之后，你可以在 Deco 底部看到 packager output。</div><div class=\"line\">\t2、开启 iOS 模拟器，你可以开启任何已经安装了的 iOS 模拟器通过点击模拟器按钮。</div><div class=\"line\">\t3、开启 Android 模拟器。</div><div class=\"line\">\t4、开启 Hot Reload，开启热加载，自动刷新 app 当有代码变化时。</div></pre></td></tr></table></figure>\n<ul>\n<li>Where can I learn React and React Native? We recommend following the Facebook’s official getting started <a href=\"https://facebook.github.io/react-native/docs/getting-started.html#content\" target=\"_blank\" rel=\"external\">documentation</a>, and then going through this guide, <a href=\"http://www.reactnativeexpress.com/\" target=\"_blank\" rel=\"external\">React Native Express</a>.</li>\n</ul>\n","categories":["React"],"tags":["React"]},{"title":"前端趋势","url":"http://yoursite.com/2016/10/13/前端趋势/","content":"<p>###应用</p>\n<ul>\n<li>React</li>\n<li>redux</li>\n<li>babel</li>\n<li>webpack</li>\n<li>Vue</li>\n<li>Angular</li>\n<li>gulp</li>\n<li>underscore</li>\n<li>Modernizr</li>\n<li>lodash</li>\n<li>ember.js</li>\n<li>pdf.js</li>\n<li>backbone</li>\n<li>systemjs</li>\n<li>jest</li>\n<li>vuex</li>\n<li>vue-router</li>\n<li>ant-design</li>\n</ul>\n<hr>\n<p>###移动端</p>\n<ul>\n<li>react-native</li>\n<li>html5-boilerplate</li>\n<li>ionic</li>\n<li>hammer.js</li>\n<li>fastclick</li>\n<li>weui</li>\n<li>ratchet</li>\n<li>zepto</li>\n<li>jquery-mobile</li>\n<li>amazeui</li>\n<li>Framework7</li>\n<li>weex</li>\n<li>mui</li>\n<li>vux</li>\n<li>mint-ui</li>\n<li>OnsenUI</li>\n<li>jquery-weui</li>\n<li>ant-design-mobile</li>\n</ul>\n<hr>\n<p>###多媒体</p>\n<ul>\n<li>video.js</li>\n<li>plyr</li>\n<li>howler.js</li>\n<li>mediaelement</li>\n<li>FitVids.js</li>\n<li>jPlayer</li>\n<li>SoundManager2</li>\n<li>headtrackr</li>\n<li>Vide</li>\n<li>bideo.js</li>\n<li>BigVideo.js</li>\n<li>SoundJS</li>\n<li>popcorn.js</li>\n<li>wavesurfer.js</li>\n</ul>\n<hr>\n<p>###DOM</p>\n<ul>\n<li>jquery</li>\n<li>Font-Awesome</li>\n<li>animate.css</li>\n<li>Semantic-UI</li>\n<li>material-design-icons</li>\n<li>foundation</li>\n<li>normalize.css</li>\n<li>material-design-lite</li>\n<li>materialize</li>\n<li>phantomjs</li>\n<li>material-ui</li>\n<li>fullPage.js</li>\n<li>element</li>\n<li>ng2-admin</li>\n</ul>\n<hr>\n<p>###图片</p>\n<ul>\n<li>d3</li>\n<li>reveal.js</li>\n<li>three.js</li>\n<li>impress.js</li>\n<li>Chart.js</li>\n<li>echarts</li>\n<li>Leaflet</li>\n<li>slick</li>\n<li>Swiper</li>\n<li>chartist-js</li>\n<li>raphael</li>\n<li>TimelineJS</li>\n</ul>\n<hr>\n<p>###Form</p>\n<ul>\n<li>jQuery-File-Upload</li>\n<li>moment</li>\n<li>chosen</li>\n<li>select2</li>\n<li>ace</li>\n<li>draft-js</li>\n</ul>\n<p>###资源链接</p>\n<ul>\n<li><p><a href=\"https://www.awesomes.cn\" target=\"_blank\" rel=\"external\">awesome</a></p>\n</li>\n<li><p>2015年逐渐出现一些实现前一种想法的桌面应用，gitHub团队开发的Atom编辑器和大牌Adobe开发的Brackets编辑器就是其中代表。而React-Native的出现，更加是让开发人员雀跃不已。Electron其实就是gitHub团队开发Atom时的框架，之前叫Atom-Shell。</p>\n</li>\n<li><p>React-Native和Electron异曲同工的地方，就是提供出一个公共的容器，以及能够调用对应系统事件的API。只是React-Native主打移动端，而Electron目前只针对桌面端而已。</p>\n</li>\n</ul>\n","categories":["前端"],"tags":[]},{"title":"React入门","url":"http://yoursite.com/2016/09/13/React入门/","content":"<h2 id=\"入门印象\"><a href=\"#入门印象\" class=\"headerlink\" title=\"###入门印象\"></a>###入门印象</h2><ul>\n<li>传统组件化的特点是把组件和原生DOM节点的渲染割裂起来</li>\n<li>现代的组件架构鼓励原生DOM节点和自定义组件的统一渲染融合，比如React以及未来的Web Components规范</li>\n<li>React最为人称道的是，它是一个专注于组件架构的类库。</li>\n<li>要想用好React，我们必须跳出以往的思维，拥抱React的理念和思想，比如状态，虚拟DOM，组合优于继承，单向数据流。</li>\n<li>React专注于组件架构，所以模块系统可以直接采用CommonJS，测试框架可以使用Mocha，生态圈则可以直接依托npm，工具可以采用现成的Browserify或Webpack。</li>\n<li>React本质上是一个“状态机”，可以帮助开发者管理复杂的随着时间而变化的状态。它以一个精简的模型实现了这一点。React只关心两件事：更新DOM和响应事件。</li>\n<li>React不处理Ajax、路由和数据处理，也不规定数据组织的方式，它不是一个MVC框架。事实上，它已经在数个MVC框架中被用来渲染视图了。</li>\n<li>React 不是一个完整的MVC，MVVM框架</li>\n<li>React 跟 Web Components不冲突</li>\n<li>React 的特点就是轻</li>\n</ul>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"###JSX\"></a>###JSX</h2><ul>\n<li>在React中，组件是用于分离关注点的，而不是被当作模版或处理显示逻辑的。</li>\n<li>React包含了一种可选的类HTML标记语言。</li>\n<li>JSX即JavaScript XML，一种在React组件内部构建标签的类XML语法。</li>\n<li>JSX 会转换为原生的JS函数，因此有一些关键词我们是不能用的<ul>\n<li>for 要转换成 htmlFor</li>\n<li>class 要转换成 className</li>\n</ul>\n</li>\n<li>React把所有的内联样式都规范化为了驼峰形式，与JS中DOM的style属性一样。</li>\n<li><code>var R = React.DOM;</code> React在<code>React.DOM.*</code>命名空间下提供了一系列的工厂，如：<code>R.div(),R.hr(),R.h2(null,&#39;label text&#39;)</code>;</li>\n<li>React 自动绑定了组件所有方法的作用域，因此你不需要手动绑定。</li>\n<li><code>this.props.children</code> React将开始标签和结束标签之间的所有的子节点保存在一个名为 <code>this.props.children</code> 的特殊组件属性中。</li>\n<li><code>React.createClass()</code></li>\n</ul>\n<h2 id=\"版本演进\"><a href=\"#版本演进\" class=\"headerlink\" title=\"###版本演进\"></a>###版本演进</h2><ul>\n<li>React 「一分为二」</li>\n<li><p>原本的 react 被拆分为 react 及 react-dom 两个 package。</p>\n<ul>\n<li>其中 react package 中包含React.createElement、 .createClass、 .Component， .PropTypes， .Children 这些 API。</li>\n<li>而 react-dom package 中包含 ReactDOM.render、 .unmountComponentAtNode、 .findDOMNode。</li>\n</ul>\n</li>\n<li><p>原本在服务端渲染用的两个 API .renderToString 和 .renderToStaticMarkup 被放在了 react-dom/server 中。</p>\n</li>\n<li><p>此外，原本 React.addons 下面的工具全部变成了独立的 package</p>\n<ul>\n<li>react-addons-clone-with-props</li>\n<li>react-addons-create-fragment</li>\n<li>react-addons-css-transition-group</li>\n<li>react-addons-linked-state-mixin</li>\n<li>react-addons-perf</li>\n<li>react-addons-pure-render-mixin</li>\n<li>react-addons-shallow-compare</li>\n<li>react-addons-test-utils</li>\n<li>react-addons-transition-group</li>\n<li>react-addons-update</li>\n<li>ReactDOM.unstable_batchedUpdates （在 react-dom 中）</li>\n</ul>\n</li>\n<li>refs 变成了真正的 DOM 节点。当我们需要获取 React 组件上某个 DOM 节点时，React 提供了 refs 方法方便我们快速引用。为了方便我们使用，React 还「贴心」地对 refs 做了一层封装，使用 。this.refs.xxx.getDOMNode() 或 React.findDOMNode(this.refs.xxx) 可以获取到真正的 DOM 节点。</li>\n<li>react-tools 及 JSXTransformer.js 已弃用。</li>\n<li>React.initializeTouchEvents 已弃用。</li>\n<li>props 一旦创建永远不可修改，因此 .setProps 及 .replaceProps 已废弃。</li>\n<li>children 不可以传对象类型，推荐传入数组，或使用 React.createFragment 方法（其实就是转换为了数组）。</li>\n<li>React.addons.classSet 已经移除，使用 classnames package 替代。</li>\n</ul>\n<h2 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"###生命周期函数\"></a>###生命周期函数</h2><ul>\n<li><p>创建时</p>\n<ul>\n<li>getDefaultProps() // 对于那些没有被父辈组件指定props属性的新建实例来说，这个方法返回的对象可用于为实例设置默认的props值</li>\n<li>getInitialState() // 初始化每个实例的state</li>\n<li>componentWillMount() // 该方法在完成首次渲染之前被调用，这也是在render方法调用前可以修改组件state的最后一次机会</li>\n<li>render() // 创建一个虚拟DOM，用来表示组件的输出。对于一个组件来说，render是唯一一个必需的方法，并且有特定的规则。（是什么规则？）</li>\n<li>componentDidMount() // 在render方法成功调用并且真实的DOM已经被渲染出来之后，你可以在componentDidMount内部通过（？）来访问到它。（this.getDOMNode()）</li>\n</ul>\n</li>\n<li><p>存在时</p>\n<ul>\n<li>componentWillReceiveProps() // 任意时刻，组件的props都可以通过父辈组件来修改，在这个函数中你也将获得更改props对象以及更新state的机会</li>\n<li>shouldComponentUpdate()</li>\n<li>componentWillUpdate() // 组件会在接收到新的props或者state进行渲染之前，调用该方法，不可以在该方法中更新state或者props</li>\n<li>componentDidUpdate() // </li>\n</ul>\n</li>\n<li><p>销毁时</p>\n<ul>\n<li>componentWillUnmount() // 在组件被销毁之前调用这个方法，来做一些清除工作</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2016/09/13/React入门/react1.png\" alt=\"[react]\" title=\"[react]\">\n<h2 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"###数据流\"></a>###数据流</h2><ul>\n<li>在React中，数据的流向是单向的，从父节点传递到子节点，因而组件是简单且易把握的，他们只需从父节点获取props渲染即可。</li>\n<li>React内部还具有自己的状态state，这些状态只能在组件内修改。</li>\n<li>你可以把React组件看成一个函数，它接受props和state作为参数，返回一个虚拟的DOM表现。</li>\n<li>使用<code>props</code>把任意类型的数据传递给组件。</li>\n<li>可以通过this.props访问props，但绝对不可以通过这种方式修改它，一个组件绝对不可以自己修改自己的props。</li>\n<li>propTypes 通过在组件中定义一个配置对象，React提供了一种验证props的方式。</li>\n<li>state只存在于组件内部</li>\n<li>千万不能直接修改this.state,永远记得要通过this.setState方法来修改。</li>\n<li>props are immutable: they are passed from the parent and are “owned” by the parent.</li>\n<li>To implement interactions, we introduce mutable <code>state</code> to the component. <code>this.state</code>is private to the component and can be changed by calling <code>this.setState()</code>. When the state updates,the component rerenders itself.</li>\n<li>使用<code>props</code>在整个组件树中传递数据和配置</li>\n<li>避免在组件内部修改<code>this.props</code>或调用<code>this.setProps</code>,请把<code>props</code>当作只读的（immutable）</li>\n<li>使用<code>props</code>来做事件处理器，与子组件通信</li>\n<li>使用<code>state</code>存储简单的视图状态</li>\n<li>使用<code>this.setState</code>来设置状态，而不要使用<code>this.state</code>直接修改状态</li>\n<li>不要尝试把<code>props</code>复制到<code>state</code>中，要尽可能把<code>props</code>当作数据源。</li>\n<li>更新组件内部状态会触发组件重绘。</li>\n<li>更新组件状态有两种方案，组件的<code>setState()</code>和<code>replaceState()</code>，更多的情况下会使用<code>setState()</code>，仅仅是把传入的对象合并到已有的state对象上。</li>\n</ul>\n<h2 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"###事件处理\"></a>###事件处理</h2><ul>\n<li>React 通过将事件处理器绑定到组件上来处理事件，在事件被触发的同时，更新组件的内部状态（state），组件内部状态（state）的更新会触发组件重绘。</li>\n<li>React 绑定事件处理器的语法和HTML语法非常类似，但性能是不一样的。</li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"###组件\"></a>###组件</h2><ul>\n<li>在传统HTML中，元素是构成页面的基础单元，但在React中，构成页面的基础单元是React组件。你可以把React组件理解成混入了JS表达能力的HTML元素，实际上写React代码主要就是构建组件，就像编写HTML文档时使用元素一样。</li>\n<li>复合（composability）</li>\n<li>本质上，一个组件就是一个JS函数，它接受属性（props）和状态（state）作为参数，并输出渲染好的HTML。</li>\n<li>组件的核心理念就是可预测性和可预知性。</li>\n<li>在React中，表单组件有两种类型：约束组件和无约束组件。</li>\n<li>无约束组件可以用在基本的无须任何验证或者输入控制的表单中。</li>\n<li>约束组件的模式与React其他类型组件的模式一致，表单组件的状态交由React组件控制，状态值被存储在state中。</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"###动画\"></a>###动画</h2><ul>\n<li>动画可以让用户体验变得更加流畅与自然。</li>\n<li>TransitionGroup(插件) ＋ CSS3 =&gt; CSSTransitionGroup(CSS渐变组)</li>\n<li>CSSTransitionGroup 会在合适的渲染、重渲染时间点有策略地添加和移除元素的class，以此来简化将CSS动画应用于渐变的过程。而你唯一需要做的是给些class写明合适的样式。</li>\n<li><code>var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;</code></li>\n<li><code>&lt;ReactCSSTransitionGroup transitionName=&#39;xx&#39;&gt;{...}&lt;/ReactCSSTransitionGroup&gt;</code></li>\n<li>使用渐变组需要注意两点：1、渐变组会延迟子组件的移除直到动画完成。2、渐变组的每一个子组件都必须设置一个唯一的<code>key</code>属性。</li>\n<li>默认情况下，渐变组同时启用了进入和退出的动画，可以通过给组件添加<code>transitionEnter={false}</code>或者<code>transitionLeave={false}</code>属性来控制。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"###实例\"></a>###实例</h2><ul>\n<li>官网留言组件，数据流，事件绑定，如果看不懂、迷糊，很简单，那就反复看上几十遍，手敲十几遍，就什么都懂了。</li>\n<li>官方案例基本思想：React构件组件，jQuery之Ajax获取数据，Express搭建服务器。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CommentBox url=&apos;/api/comments&apos; pollInterval=&#123;2000&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">CommentBox</div><div class=\"line\">  |---this.setState(&#123;data: data&#125;)</div><div class=\"line\">  |---this.props.url  this.props.pollInterval</div><div class=\"line\">  |---CommentList</div><div class=\"line\">  |\t\t\t|---data=&#123;this.state.data&#125;</div><div class=\"line\">  |\t\t\t|---Comment</div><div class=\"line\">  |\t\t\t|</div><div class=\"line\">  |</div><div class=\"line\">  |---onCommentSubmit=&#123;this.handleCommentSubmit&#125;</div><div class=\"line\">  |---CommentForm</div><div class=\"line\">  \t\t\t|---this.state.author</div><div class=\"line\">  \t\t\t|---this.state.text</div><div class=\"line\">  \t\t\t|---this.setState(&#123;author:&apos;&apos;,text:&apos;&apos;)</div><div class=\"line\">  \t\t\t|---this.setState(&#123;author: e.target.value)</div><div class=\"line\">  \t\t\t|---this.setState(&#123;text: e.target.value)</div></pre></td></tr></table></figure>\n<ul>\n<li>项目地址 <a href=\"https://github.com/DearSW/react-start\" target=\"_blank\" rel=\"external\">https://github.com/DearSW/react-start</a></li>\n</ul>\n<p>###官方示例(react-15.3.2)</p>\n<ul>\n<li>总体来说需要三个文件的支持，react.js、react-dom.js、babel.js，解释就是，react是核心，react-dom是操作DOM，babel.js是编译(因为jsx或者es6大部分浏览器还无法直接识别的缘故）。</li>\n<li>如果你直接使用babel.js插入到html中，那么这样是没有什么问题的，但是只能用于开发环境，如果是上线的话，是需要提前编译好，而不是在浏览器中来编译。如何手工来编译呢，那么先安装命令吧，<code>npm isntall -g babel-cli</code>，这是全局安装babel命令；接着再安装语言版本，这个直接放在工程中的开发依赖中好了，使用这个命令<code>npm install --save-dev babel-preset-react</code>，然后就可以命令行来编译了，<code>babel example.js --presets react --out-dir=build</code>，这个命令的意思是编译example.js并输出到build目录下。</li>\n<li>basic-jsx(内置jsx),basic-jsx-external(外部jsx),basic-jsx-harmony(使用es6语法的jsx),basic-jsx-precompile(预编译jsx语法)</li>\n<li>jquery-bootstrap(react和bootstrap结合)</li>\n<li>jquery-mobile(react和jquery mobile结合)</li>\n</ul>\n<h2 id=\"技术栈-babel\"><a href=\"#技术栈-babel\" class=\"headerlink\" title=\"###技术栈(babel)\"></a>###技术栈(babel)</h2><ul>\n<li>在React实例中发现这样一段 JS 引入<code>&lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</code>，这是什么意思？</li>\n<li>使用babel-standalone模块提供的浏览器版本，将其插入网页，网页中实时将ES6代码转为ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。浏览器会提示：<code>You are using the in-browser Babel transformer. Be sure to precompile your scripts for production - https://babeljs.io/docs/setup/</code></li>\n<li>在react 0.14前，浏览器端实现对jsx的编译依赖jsxtransformer.js 。</li>\n<li>在react 0.14后，这个依赖的库改为browser.js，页面script标签的type也由text/jsx改为text/babel，但是以上只能用来测试学习react，生产环境需要借助编译工具事先将jsx编译成js，对应的这个工具也由react-tool更换为babel。</li>\n<li><code>.babelrc</code>babel的配置文件，必需的，放置在根目录下。包含两个字段，<code>&quot;presets&quot;</code>和<code>&quot;plugins&quot;</code>，其中 presets 很重要，官方提供了三个规则集，如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">ES2015转码规则</div><div class=\"line\">$ npm install --save-dev babel-preset-es2015</div><div class=\"line\"></div><div class=\"line\">react转码规则</div><div class=\"line\">$ npm install --save-dev babel-preset-react</div><div class=\"line\"></div><div class=\"line\">ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</div><div class=\"line\">$ npm install --save-dev babel-preset-stage-0</div><div class=\"line\">$ npm install --save-dev babel-preset-stage-1</div><div class=\"line\">$ npm install --save-dev babel-preset-stage-2</div><div class=\"line\">$ npm install --save-dev babel-preset-stage-3</div><div class=\"line\"></div><div class=\"line\">\t.babelrc文件内容如下：</div><div class=\"line\"></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;presets&quot;: [&quot;es2015&quot;,&quot;react&quot;,&quot;stage-3&quot;]</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"ERROR集合\"><a href=\"#ERROR集合\" class=\"headerlink\" title=\"###ERROR集合\"></a>###ERROR集合</h2><ul>\n<li>在 render 中的标签需要闭合，自闭合标签也需要闭合。</li>\n<li><code>Uncaught Invariant Violation: Minified React error #37;</code>浏览器提示这种错误，最后在ReactDOM.render()发现错误，第二个参数指定的容器不存在，导致错误。</li>\n<li>React 对<code>this</code>的态度，React 自动绑定了组件所有方法的作用域，因此你永远都不需要手动绑定。但是，如果产生了闭包，就需要手动来绑定了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleClick: function(event) &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\">render: function()&#123;</div><div class=\"line\">\treturn ( &lt;div onClick=&#123;this.handleClick&#125; &gt;...&lt;/div&gt; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render: function()&#123;</div><div class=\"line\">\treturn ( &lt;div onClick=&#123;this.handleClick.bind(this)&#125; &gt;...&lt;/div&gt; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;</div><div class=\"line\"></div><div class=\"line\">       var TodoList = React.createClass(&#123;</div><div class=\"line\">           getInitialState: function() &#123;</div><div class=\"line\">               return &#123;items: [&apos;hello&apos;, &apos;world&apos;, &apos;click&apos;, &apos;me&apos;]&#125;;</div><div class=\"line\">           &#125;,</div><div class=\"line\">           handleAdd: function() &#123;</div><div class=\"line\">               var newItems =</div><div class=\"line\">                       this.state.items.concat([prompt(&apos;Enter some text&apos;)]);</div><div class=\"line\">               this.setState(&#123;items: newItems&#125;);</div><div class=\"line\">           &#125;,</div><div class=\"line\">           handleRemove: function(i) &#123;</div><div class=\"line\">               var newItems = this.state.items;</div><div class=\"line\">               newItems.splice(i, 1);</div><div class=\"line\">               this.setState(&#123;items: newItems&#125;);</div><div class=\"line\">           &#125;,</div><div class=\"line\">           render: function() &#123;</div><div class=\"line\"></div><div class=\"line\">               var items = this.state.items.map(function(item, i) &#123;</div><div class=\"line\">                   return (</div><div class=\"line\">                           &lt;div key=&#123;item&#125; onClick=&#123;this.handleRemove.bind(this, i)&#125; className=&apos;item&apos;&gt;</div><div class=\"line\">                               &#123;item&#125;</div><div class=\"line\">                           &lt;/div&gt;</div><div class=\"line\">                   )</div><div class=\"line\">               &#125;.bind(this));</div><div class=\"line\"></div><div class=\"line\">               return (</div><div class=\"line\">                       &lt;div className=&apos;todoList&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">                           &lt;button onClick=&#123;this.handleAdd&#125; className=&apos;submit&apos;&gt;</div><div class=\"line\">                               Add Item</div><div class=\"line\">                           &lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">                           &lt;ReactCSSTransitionGroup</div><div class=\"line\">                               transitionName=&quot;example&quot;</div><div class=\"line\">                               transitionEnterTimeout=&#123;500&#125;</div><div class=\"line\">                               transitionLeaveTimeout=&#123;300&#125;&gt;</div><div class=\"line\">                               &#123;items&#125;</div><div class=\"line\">                           &lt;/ReactCSSTransitionGroup&gt;</div><div class=\"line\"></div><div class=\"line\">                       &lt;/div&gt;</div><div class=\"line\">               )</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"###工作流程\"></a>###工作流程</h2><ul>\n<li><p>一个是编译：将 JSX （或者你用了 ES6 的特性的话也需要这一步）编译到被浏览器广泛支持的 ES5 的代码。</p>\n</li>\n<li><p>第二个是进行模块绑定：因为浏览器不识得这些模块（通常是编译成 ES5 的 CommonJS 规范实现的模块，这并不是浏览器支持的东西），不知道怎么去加载他们，模块绑定就是根据模块之间的依赖关系，将其“合并”到单个或者几个 JS 文件，让程序能直接被浏览器执行。</p>\n</li>\n<li><p>第一个编译的步骤可以直接交给 Babel 搞定。</p>\n</li>\n<li><p>第二个步骤的话，目前推荐用 webpack 做比较方便。</p>\n</li>\n<li><p>再之就是用 Gulp 控制那两个工具去处理源代码和输出了，总体上是这么个流程。</p>\n</li>\n<li><p>细节的比如 uglify，sourcemap 之类的事情都可以通过上述工具便捷地完成。</p>\n</li>\n</ul>\n<h2 id=\"番外-ESLint\"><a href=\"#番外-ESLint\" class=\"headerlink\" title=\"###番外(ESLint)\"></a>###番外(ESLint)</h2><ul>\n<li>ESLint 支持JSX语法的检测，包含JSLint等功能，作者为<code>红宝书的作者</code></li>\n<li>全局安装<code>npm install eslint -g</code>  </li>\n<li>配置文件<code>.eslintrc</code> ，新建此文件在你需要的根目录下即可（并填入相应的配置项）</li>\n<li>忽略文件<code>.eslintignore</code></li>\n<li><code>.eslintrc</code>的基本配置项如下所示：</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        &quot;extends&quot;: &quot;eslint:recommended&quot;,</div><div class=\"line\">        </div><div class=\"line\">        &quot;env&quot;:&#123;</div><div class=\"line\">          &quot;node&quot;:true,</div><div class=\"line\">          &quot;es6&quot;:true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        </div><div class=\"line\">        &quot;rules&quot;: &#123;</div><div class=\"line\">            &quot;semi&quot;: [&quot;error&quot;, &quot;always&quot;],</div><div class=\"line\">            &quot;quotes&quot;: &quot;off&quot;,</div><div class=\"line\">            &quot;no-console&quot;:&quot;off&quot;,</div><div class=\"line\">            &quot;no-unused-vars&quot;:&quot;off&quot;,</div><div class=\"line\">            &quot;no-unreachable&quot;:&quot;off&quot;,</div><div class=\"line\">            &quot;no-redeclare&quot;:&quot;warn&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如需要自动修复一些不规范的代码问题,例如没有分号的问题,可以在目录终端下输入命令 <code>eslint . --fix</code> 来进行修复</p>\n</li>\n</ul>\n<h2 id=\"番外（-ajax）\"><a href=\"#番外（-ajax）\" class=\"headerlink\" title=\"###番外（$.ajax）\"></a>###番外（$.ajax）</h2><ul>\n<li>是jQuery最底层的Ajax实现</li>\n<li>语法<code>$.ajax(options)</code>，options为参数对象，这个对象中包含了所需要的请求设置以及回调函数等信息，参数以key／value的形式存在，所有参数都是可选的。</li>\n<li>介绍一个体验优化参数，<code>global</code>参数，它的value是boolean类型的，默认为true，表示触发全局Ajax事件，设置为false将不会触发全局Ajax事件</li>\n<li>全局Ajax事件有6个：<code>ajaxStart(callback)</code> <code>ajaxStop(callback)</code> <code>ajaxComplete(callback)</code> <code>ajaxError(callback)</code> <code>ajaxSend(callback)</code> <code>ajaxSuccess(callback)</code></li>\n<li>使用这些全局Ajax事件就是在用户发起Ajax请求后，为了让用户知道服务器正在处理数据，了解当前的变化，不至于让用户感到茫然，及时给用户一些反馈。</li>\n<li>比如在<code>ajaxStart()</code>中启动一个新的类名，在此类名下，按钮或者某块区域给出动态提示，接着在 <code>ajaxStop()</code>中移除这个类名，表示完成了Ajax请求。</li>\n</ul>\n<h2 id=\"资源链接\"><a href=\"#资源链接\" class=\"headerlink\" title=\"###资源链接\"></a>###资源链接</h2><ul>\n<li><a href=\"http://lib.csdn.net/article/react/29964\" target=\"_blank\" rel=\"external\">React工程目录搭建</a></li>\n<li>最好的文档 <a href=\"https://facebook.github.io/react/docs/\" target=\"_blank\" rel=\"external\">官方文档</a> (可能需要翻墙访问)</li>\n</ul>\n","categories":["React"],"tags":["React"]},{"title":" 前端技术库工程组建","url":"http://yoursite.com/2016/08/17/前端技术库的组建/","content":"<p>###jQuery类</p>\n<hr>\n<ul>\n<li><p>jQuery，在线版，<code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>轮播组件 <a href=\"http://unslider.com/\" target=\"_blank\" rel=\"external\">unslider</a> (5.6k)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Unslider is an ultra-simple jQuery slider for your website.</div><div class=\"line\"></div><div class=\"line\">\t&lt;link rel=&quot;stylesheet&quot; href=&quot;/path/to/unslider/dist/css/unslider.css&quot;&gt;</div><div class=\"line\">\t&lt;!-- The barebones HTML required for Unslider --&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;div class=&quot;wrap&quot;&gt;</div><div class=\"line\">            &lt;div class=&quot;demo&quot;&gt;</div><div class=\"line\">                &lt;div class=&quot;slider&quot;&gt;</div><div class=\"line\">                    &lt;div class=&quot;banner&quot;&gt;</div><div class=\"line\">                        &lt;ul&gt;</div><div class=\"line\">                            &lt;li&gt;This is my slider.&lt;/li&gt;</div><div class=\"line\">                            &lt;li&gt;Pretty cool, huh?&lt;/li&gt;</div><div class=\"line\">                        &lt;/ul&gt;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">     &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;!-- And the relevant JavaScript --&gt;</div><div class=\"line\">\t&lt;script src=&quot;//code.jquery.com/jquery-3.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">\t&lt;script src=&quot;/path/to/unslider.js&quot;&gt;&lt;/script&gt; </div><div class=\"line\">\t&lt;!-- but with the right path! --&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t$(&apos;.banner&apos;).unslider(&#123;</div><div class=\"line\">\t\tanimation: &apos;fade／vertical／horizontal&apos;, // 添加动画效果 </div><div class=\"line\">\t\tautoplay: true, // 自动播放</div><div class=\"line\">\t\tarrows: false, // 左右箭头导航</div><div class=\"line\">\t\tnav: false,  // 下部导航</div><div class=\"line\">\t\tinfinite: true, // 无限播放</div><div class=\"line\">\t\tspeed: 750, // 移动速度</div><div class=\"line\">\t&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>自己的原生轮播组件 slider <a href=\"https://github.com/DearSW/slider\" target=\"_blank\" rel=\"external\">https://github.com/DearSW/slider</a></p>\n</li>\n<li><p><a href=\"https://github.com/DearSW/code-segment/blob/master/js/Back-to-top.js\" target=\"_blank\" rel=\"external\">返回顶部按钮</a> Back to top.</p>\n</li>\n<li><a href=\"https://github.com/DearSW/fullPage.js\" target=\"_blank\" rel=\"external\">fullpage.js</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&apos;fullpage&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;section&gt;</div><div class=\"line\">\t\tFirst</div><div class=\"line\">\t\t&lt;div class=&apos;slide&apos;&gt;one&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div class=&apos;slide&apos;&gt;tow&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div class=&apos;slide&apos;&gt;three&lt;/div&gt;</div><div class=\"line\">\t&lt;/section&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;section&gt;Second&lt;/section&gt;</div><div class=\"line\">\t&lt;section&gt;Third&lt;/section&gt;</div><div class=\"line\">\t&lt;section&gt;Four&lt;/section&gt;</div><div class=\"line\">\t&lt;section&gt;Five&lt;/section&gt;</div><div class=\"line\">\t</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">$(&apos;#fullpage&apos;).fullpage(options);</div><div class=\"line\">var options = &#123;</div><div class=\"line\">\tsectionsColor:[&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;],</div><div class=\"line\">\tcontrolArrows: true/false,</div><div class=\"line\">\tverticalCentered: true/false,</div><div class=\"line\">\tresize: true/false,</div><div class=\"line\">\tscrollingSpeed: number,</div><div class=\"line\">\tanchors: [&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;],</div><div class=\"line\">\tlockAnchors: </div><div class=\"line\">\t</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>swiper 是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。</li>\n<li>covervid 视频背景插件，原生支持和jQuery支持。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.covervid-wrapper &#123;</div><div class=\"line\">  \t\tposition: absolute;</div><div class=\"line\">   \ttop: 0;</div><div class=\"line\">   \tleft: 0;</div><div class=\"line\">   \twidth: 100%;</div><div class=\"line\">   \theight: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;covervid-wrapper&quot;&gt;</div><div class=\"line\">   \t&lt;video class=&quot;covervid-video&quot; autoplay loop poster=&quot;img/video-fallback.png&quot;&gt;</div><div class=\"line\">       \t&lt;source src=&quot;videos/clouds.webm&quot; type=&quot;video/webm&quot;&gt;</div><div class=\"line\">       \t&lt;source src=&quot;videos/clouds.mp4&quot; type=&quot;video/mp4&quot;&gt;</div><div class=\"line\">   \t&lt;/video&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">\t// If using jQuery</div><div class=\"line\">\t\t$(&apos;.masthead-video&apos;).coverVid(1920, 1080);</div><div class=\"line\">\t\t</div><div class=\"line\">\t// If not using jQuery (Native Javascript)</div><div class=\"line\">\t</div><div class=\"line\">\t\tcoverVid(document.querySelector(&apos;.covervid-video&apos;), 640, 360);</div><div class=\"line\"></div><div class=\"line\">           var vidContainer = document.querySelector(&apos;.covervid-wrapper&apos;);</div><div class=\"line\">           var vid = document.querySelector(&apos;.covervid-video&apos;);</div><div class=\"line\"></div><div class=\"line\">           function fullScreen(element,w,h) &#123;</div><div class=\"line\">               var screenHeight = window.innerHeight;</div><div class=\"line\">               var screenWidth = window.innerWidth;</div><div class=\"line\"></div><div class=\"line\">               if(w) &#123;</div><div class=\"line\">                   element.style.width = screenWidth + &apos;px&apos;;</div><div class=\"line\">               &#125;</div><div class=\"line\">               if(h) &#123;</div><div class=\"line\">                   element.style.height = screenHeight + &apos;px&apos;;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           fullScreen(vid,true,false);</div><div class=\"line\">           fullScreen(vidContainer,true,true);</div><div class=\"line\">\t\t</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>moment.js</code> JavaScript 日期处理类库<ul>\n<li><code>https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment.min.js</code>，这个是处理时间的默认版本。</li>\n<li><code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment-with-locales.min.js&quot;&gt;&lt;/script&gt;</code>，这个是携带语言的版本，可以在脚本中声明语言：如这样<code>moment.locale(str)</code>。</li>\n<li><code>&lt;script src=&quot;./moment-timezone-with-data.min.js&quot;&gt;&lt;/script&gt;</code>，这个版本是世界时区的版本，并携带了各个时区的数据，这样使用：<code>var m = moment().tz(str);$labelTime.text(m.format(&quot;HH:mm A &quot;) + m.zoneAbbr());</code>，moment().tz(String) is used to change the timezone on an existing moment。</li>\n<li>演示地址 <a href=\"https://dearsw.github.io/Collection/html/c5_2-world.html\" target=\"_blank\" rel=\"external\">https://dearsw.github.io/Collection/html/c5_2-world.html</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><code>video.js</code> H5视频播放器<ul>\n<li>需要两个文件，video-js.css 和 video.js</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"模块加载器\"><a href=\"#模块加载器\" class=\"headerlink\" title=\"###模块加载器\"></a>###模块加载器</h2><ul>\n<li>AMD <code>&lt;script src=&quot;//cdn.bootcss.com/require.js/2.3.2/require.min.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><a href=\"https://my.oschina.net/chenzhiqiang/blog/129783\" target=\"_blank\" rel=\"external\">JS模块化编程</a></li>\n</ul>\n<h2 id=\"CSS类\"><a href=\"#CSS类\" class=\"headerlink\" title=\"###CSS类\"></a>###CSS类</h2><ul>\n<li>初始化样式 <a href=\"//odfgqiz57.bkt.clouddn.com/css/normalize.css\">normalize</a> (<a href=\"http://odfgqiz57.bkt.clouddn.com/css/normalize.css)(https://ofjyk77x6.qnssl.com/css/normalize.css\" target=\"_blank\" rel=\"external\">http://odfgqiz57.bkt.clouddn.com/css/normalize.css)(https://ofjyk77x6.qnssl.com/css/normalize.css</a>)</li>\n<li><a href=\"https://github.com/DearSW/code-segment/blob/master/css/%E6%B8%90%E5%8F%98%E8%89%B2.md\" target=\"_blank\" rel=\"external\">渐变色集合</a></li>\n<li><a href=\"https://github.com/DearSW/semanticui-source-code-parse/blob/master/1.container.md\" target=\"_blank\" rel=\"external\">semanticUI之container</a></li>\n<li><a href=\"\">semantic之grid</a></li>\n<li>meta viewport <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,height=device-height,inital-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; /&gt;</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，</div><div class=\"line\">在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，</div><div class=\"line\">但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。</div><div class=\"line\">在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，</div><div class=\"line\">这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，</div><div class=\"line\">所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，</div><div class=\"line\">移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），</div><div class=\"line\">但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。</div><div class=\"line\">下图列出了一些设备上浏览器的默认viewport的宽度。</div><div class=\"line\"></div><div class=\"line\">&lt;meta name=&quot;msapplication-window&quot; content=&quot;width=device-width;height=device-height&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">content中有 6 个属性可用，width，initial-scale,minimum-scale,maximum-scale,height,user-scalable</div><div class=\"line\"></div><div class=\"line\">资源链接(http://www.cnblogs.com/2050/p/3877280.html)</div></pre></td></tr></table></figure>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"###兼容性\"></a>###兼容性</h2><ul>\n<li>html5shiv.js － HTML5 支持，html5shiv is an HTML5 JavaScript shim for IE to recognise and style the HTML5 elements</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--[if lt IE 9]&gt;</div><div class=\"line\">\t&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>respond.js  – 媒体查询支持，min/max-width media query polyfill</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>selectivizr.js  – css伪类支持 (eg :last-child)，selectivizr is a JavaScript utility that emulates CSS3 pseudo-classes and attribute selectors in Internet Explorer 6-8. </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/selectivizr/1.0.2/selectivizr-min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Modernizr － 浏览器特性检测，Modernizr is a JavaScript library that detects HTML5 and CSS3 features in the user’s browser.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"###React\"></a>###React</h2><ul>\n<li><p>生产环境</p>\n<ul>\n<li><p>babel转码器，在线版，<code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.17.0/babel.min.js&quot;&gt;&lt;/script&gt;</code>，Standalone build of Babel for use in non-Node.js environments. Similar to the (now deprecacted) babel-browser</p>\n</li>\n<li><p>react，在线版，<code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react.min.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>react-with-addons，在线版，<code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-with-addons.min.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>react-dom，在线版，<code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-dom.min.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>react-dom-server，在线版，<code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-dom-server.min.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SemanticUI\"><a href=\"#SemanticUI\" class=\"headerlink\" title=\"###SemanticUI\"></a>###SemanticUI</h2><h2 id=\"Sencha-Touch\"><a href=\"#Sencha-Touch\" class=\"headerlink\" title=\"###Sencha Touch\"></a>###Sencha Touch</h2><h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"###Canvas\"></a>###Canvas</h2><ul>\n<li><code>&lt;canvas width=&#39;x&#39; height=&#39;x&#39; id=&#39;x&#39; &gt;抱歉，请端正你的生活作风&lt;/canvas&gt;</code></li>\n<li><code>if(canvas.getContext){ canvas.getContext(&#39;2d&#39;) }</code></li>\n<li>2D上下文的坐标开始于<code>&lt;canvas&gt;</code>元素的左上角，原点坐标是(0,0)。默认情况下，width和height表示水平和垂直方向上可用的像素数目。</li>\n<li>填充（fillStyle）和描边（strokeStyle），默认值为“＃000000”，所有涉及描边和填充的操作都将使用这两个样式，除非重新设置这两个值。</li>\n<li>绘制矩形：fillRect(),strokeRect(),clearRect()，都接受4个参数，x坐标，y坐标，width，heigth；</li>\n<li>描边的线条宽度由lineWidth属性控制，值为整数；lineCap属性控制线条末端的形状是平头（butt）、圆头（round）、方头（square）；lineJoin属性控制线条相交的方式是圆交（round）、斜交（bevel）、斜接（miter）。</li>\n<li><p>绘制路径：</p>\n<ul>\n<li><code>arc(x, y, radius, startAngle, endAngle, counterclockwise)</code>，绘制一条弧线。</li>\n<li><code>arcTo(x1, y1, x2, y2, raduis)</code>，从上一点开始绘制一条弧线。</li>\n<li><code>lineTo(x, y)</code>，从上一点绘制一条直线，到(x, y)为止。</li>\n<li><code>moveTo(x, y)</code>，将绘图游标移动到(x, y)。</li>\n</ul>\n</li>\n<li><p>合成：<code>globalAlpha</code>和<code>globalCompositionOperation</code></p>\n</li>\n<li>使用图像数据：<code>getImageDate()</code></li>\n</ul>\n<p>###待整理</p>\n<ul>\n<li><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/mobile.css&quot; media=&quot;(max-width: 640px)&quot;&gt;</code></p>\n</li>\n<li></li>\n<li><code>&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;img/webclip.png&quot; sizes=&quot;512x512&quot;&gt;</code></li>\n<li><code>&lt;script async=&quot;&quot; src=&quot;//www.google-analytics.com/analytics.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;!function(e,a,t,n,c,o,s){e.GoogleAnalyticsObject=c,e[c]=e[c]||function(){(e[c].q=e[c].q||[]).push(arguments)},e[c].l=1*new Date,o=a.createElement(t),s=a.getElementsByTagName(t)[0],o.async=1,o.src=n,s.parentNode.insertBefore(o,s)}(window,document,&quot;script&quot;,&quot;//www.google-analytics.com/analytics.js&quot;,&quot;ga&quot;),ga(&quot;create&quot;,&quot;UA-69889362-1&quot;,&quot;auto&quot;),ga(&quot;send&quot;,&quot;pageview&quot;);&lt;/script&gt;</code></li>\n<li>cdnjs</li>\n<li><code>https://dearsw.github.io/Frontend-Resource/html/index.html</code></li>\n<li>http 无法和 https互相访问的问题，那就是不要给URL加上固定的协议，让浏览器自己去选择如何使用什么协议，也就是相对URL的写法。如：<code>https://dearsw.github.io/Frontend-Resource/html/index.html</code>，改写成相对写法：<code>//dearsw.github.io/Frontend-Resource/html/index.html</code>。</li>\n</ul>\n","categories":["前端"],"tags":[]},{"title":"前端九剑","url":"http://yoursite.com/2016/07/18/前端九剑/","content":"<h2 id=\"CSS似酒，得品；JS似剑，得磨。\"><a href=\"#CSS似酒，得品；JS似剑，得磨。\" class=\"headerlink\" title=\"##CSS似酒，得品；JS似剑，得磨。\"></a>##CSS似酒，得品；JS似剑，得磨。</h2><h2 id=\"重剑无锋，大巧不工，路漫漫其修远兮，上下而求索吧，少年。\"><a href=\"#重剑无锋，大巧不工，路漫漫其修远兮，上下而求索吧，少年。\" class=\"headerlink\" title=\"重剑无锋，大巧不工，路漫漫其修远兮，上下而求索吧，少年。\"></a>重剑无锋，大巧不工，路漫漫其修远兮，上下而求索吧，少年。</h2><ul>\n<li>第一式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">\tarray: [1, 2, 3],</div><div class=\"line\">\tsum: ()=&gt; &#123;</div><div class=\"line\">\t\tconsole.log(this === window); // =&gt; true</div><div class=\"line\">\t\treturn this.array.reduce((result, item) =&gt; result + item);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.sum(); // =&gt; Uncaught TypeError: Cannot read property &apos;reduce&apos; of undefined(…)</div><div class=\"line\"></div><div class=\"line\">出现错误，无法读出没有定义的‘reduce’属性。原因是箭头函数没有它自己的this值，其内部的this值继承自外围作用域。</div><div class=\"line\">那么修改代码：</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">\tarray: [1, 2, 3],</div><div class=\"line\">\tsum: function() &#123;</div><div class=\"line\">\t\tconsole.log(this === window); // =&gt; false</div><div class=\"line\">\t\treturn this.array.reduce(function(result, item) &#123;</div><div class=\"line\">\t\t\treutrn result + item;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.sum(); // 6</div></pre></td></tr></table></figure>\n<ul>\n<li>第二式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var multiply = (a, b) =&gt; &#123;</div><div class=\"line\">\treturn b === undefined ? (b) =&gt; &#123; return a * b &#125;  : a * b;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var double = multiplys(2);</div><div class=\"line\">double(3); // =&gt; 6</div><div class=\"line\"></div><div class=\"line\">multiply(2, 3); // =&gt; 6</div></pre></td></tr></table></figure>\n<ul>\n<li>第三式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">        * </div><div class=\"line\">        * @param str &#123;string&#125;</div><div class=\"line\">        * @param expectsLowerCase &#123;boolean&#125;</div><div class=\"line\">        * </div><div class=\"line\">        * @return &#123;function&#125;</div><div class=\"line\">        */</div><div class=\"line\">function markup(str, expectsLowerCase) &#123;</div><div class=\"line\">\t\tvar map = object.create(null);</div><div class=\"line\">\t\tvar list = str.split(&apos;,&apos;);</div><div class=\"line\">\t\tfor(var i = 0; i &lt; list.length; i++) &#123;</div><div class=\"line\">\t\t\tmap[list[i]] = true;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tconsole.log(map);</div><div class=\"line\">\t\treturn expectsLowerCase</div><div class=\"line\">\t\t\t? function(val) &#123; return map[val.toLowerCase()] ? true : false; &#125;</div><div class=\"line\">\t\t\t: function(val) &#123; return map[val] ? true : false; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var str = &apos;hello world,i love you.&apos;;</div><div class=\"line\">var fn = markup(str, false); // =&gt; Object &#123;hello world: true, i love you.: true&#125;</div><div class=\"line\">console.log(fn(&apos;hello&apos;)); // false</div><div class=\"line\">console.log(fn(&apos;hello world&apos;)); // true</div></pre></td></tr></table></figure>\n<ul>\n<li>第四式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 函数节流</div><div class=\"line\">function throttle(method, context) &#123;</div><div class=\"line\">\tclearTimeout(method.tId);</div><div class=\"line\">\tmethod.tId = setTimeout(function()&#123;</div><div class=\"line\">\t\tmethod.call(context);</div><div class=\"line\">\t&#125;, 100);</div><div class=\"line\">&#125;</div><div class=\"line\">// 全屏元素</div><div class=\"line\">funtion fullScreen(element,h,w) &#123;</div><div class=\"line\">\tvar screenHeight = window.innerHeight;</div><div class=\"line\">\tvar screenWidth = window.innerWidth;</div><div class=\"line\">\t</div><div class=\"line\">\tif(h) &#123;</div><div class=\"line\">\t\telement.style.height = screenHeight + &apos;px&apos;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif(w) &#123;</div><div class=\"line\">\t\telement.style.width = screenWidth + &apos;px&apos;;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 窗口调整事件</div><div class=\"line\">window.onresize = funtion() &#123;</div><div class=\"line\">\tthrottle(fullScreen(document.querySelector(&apos;&apos;),true,true));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// 相关技术：移动端适配</div></pre></td></tr></table></figure>\n<ul>\n<li>第五式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">var easingMap = &#123;</div><div class=\"line\">\t&quot;linear&quot;: [0.250, 0.250, 0.750, 0.750],</div><div class=\"line\">\t&quot;ease&quot;: [0.250, 0.100, 0.250, 1.000],</div><div class=\"line\">\t&quot;easeIn&quot;: [0.420, 0.000, 1.000, 1.000],</div><div class=\"line\">\t&quot;easeOut&quot;: [0.000, 0.000, 0.580, 1.000],</div><div class=\"line\">\t&quot;easeInOut&quot;: [0.420, 0.000, 0.580, 1.000],</div><div class=\"line\">\t&quot;easeInQuad&quot;: [0.550, 0.085, 0.680, 0.530],</div><div class=\"line\">\t&quot;easeInCubic&quot;: [0.550, 0.055, 0.675, 0.190],</div><div class=\"line\">\t&quot;easeInQuart&quot;: [0.895, 0.030, 0.685, 0.220],</div><div class=\"line\">\t&quot;easeInQuint&quot;: [0.755, 0.050, 0.855, 0.060],</div><div class=\"line\">\t&quot;easeInSine&quot;: [0.470, 0.000, 0.745, 0.715],</div><div class=\"line\">\t&quot;easeInExpo&quot;: [0.950, 0.050, 0.795, 0.035],</div><div class=\"line\">\t&quot;easeInCirc&quot;: [0.600, 0.040, 0.980, 0.335],</div><div class=\"line\">\t&quot;easeInBack&quot;: [0.600, -0.280, 0.735, 0.045],</div><div class=\"line\">\t&quot;easeOutQuad&quot;: [0.250, 0.460, 0.450, 0.940],</div><div class=\"line\">\t&quot;easeOutCubic&quot;: [0.215, 0.610, 0.355, 1.000],</div><div class=\"line\">\t&quot;easeOutQuart&quot;: [0.165, 0.840, 0.440, 1.000],</div><div class=\"line\">\t&quot;easeOutQuint&quot;: [0.230, 1.000, 0.320, 1.000],</div><div class=\"line\">\t&quot;easeOutSine&quot;: [0.390, 0.575, 0.565, 1.000],</div><div class=\"line\">\t&quot;easeOutExpo&quot;: [0.190, 1.000, 0.220, 1.000],</div><div class=\"line\">\t&quot;easeOutCirc&quot;: [0.075, 0.820, 0.165, 1.000],</div><div class=\"line\">\t&quot;easeOutBack&quot;: [0.175, 0.885, 0.320, 1.275],</div><div class=\"line\">\t&quot;easeInOutQuad&quot;: [0.455, 0.030, 0.515, 0.955],</div><div class=\"line\">\t&quot;easeInOutCubic&quot;: [0.645, 0.045, 0.355, 1.000],</div><div class=\"line\">\t&quot;easeInOutQuart&quot;: [0.770, 0.000, 0.175, 1.000],</div><div class=\"line\">\t&quot;easeInOutQuint&quot;: [0.860, 0.000, 0.070, 1.000],</div><div class=\"line\">\t&quot;easeInOutSine&quot;: [0.445, 0.050, 0.550, 0.950],</div><div class=\"line\">\t&quot;easeInOutExpo&quot;: [1.000, 0.000, 0.000, 1.000],</div><div class=\"line\">\t&quot;easeInOutCirc&quot;: [0.785, 0.135, 0.150, 0.860],</div><div class=\"line\">\t&quot;easeInOutBack&quot;: [0.680, -0.550, 0.265, 1.550],</div><div class=\"line\">\t&quot;custom&quot;: [0.000, 0.350, 0.500, 1.300],</div><div class=\"line\">\t&quot;random&quot;: [</div><div class=\"line\">\t\tMath.random().toFixed(3),</div><div class=\"line\">\t    Math.random().toFixed(3),</div><div class=\"line\">\t    Math.random().toFixed(3),</div><div class=\"line\">\t    Math.random().toFixed(3)</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第六式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t// 页面垂直向下滚动指定距离的缓动函数</div><div class=\"line\">\t// num：指定滚动的距离， boolean：true（垂直），false（水平）</div><div class=\"line\">\t// time： 缓动时间， oncomplete：回调函数</div><div class=\"line\">      function scrollThere(num, boolean, time, oncomplete) &#123;</div><div class=\"line\">              time = time || 500;</div><div class=\"line\">              num = num || 0;</div><div class=\"line\">              var ease = Math.sqrt;</div><div class=\"line\">              var start = (new Date()).getTime();</div><div class=\"line\"></div><div class=\"line\">              animate();</div><div class=\"line\"></div><div class=\"line\">              function animate() &#123;</div><div class=\"line\">                  var elapsed = (new Date()).getTime() - start;</div><div class=\"line\">                  var fraction = elapsed / time;</div><div class=\"line\"></div><div class=\"line\">                  if(boolean) &#123;</div><div class=\"line\">                      if(fraction &lt; 1) &#123;</div><div class=\"line\">                          var A = ease(fraction);</div><div class=\"line\">                          var C = ease(num);</div><div class=\"line\">                          window.scrollBy(0, C*A);</div><div class=\"line\">                          setTimeout(animate, Math.min(25, time - elapsed));</div><div class=\"line\">                      &#125; else &#123;</div><div class=\"line\">                          window.scrollBy(0, num);</div><div class=\"line\">                          if(oncomplete) oncomplete();</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125; else &#123;</div><div class=\"line\">                      if(fraction &lt; 1) &#123;</div><div class=\"line\">                          var B = ease(fraction);</div><div class=\"line\">                          var D = ease(num);</div><div class=\"line\">                          window.scrollBy(D*B, 0);</div><div class=\"line\">                          setTimeout(animate, Math.min(25, time - elapsed));</div><div class=\"line\"></div><div class=\"line\">                      &#125; else &#123;</div><div class=\"line\">                          window.scrollBy(num, 0);</div><div class=\"line\">                          if(oncomplete) oncomplete();</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 相关技术：页面垂直滚动</div></pre></td></tr></table></figure>\n<ul>\n<li>第七式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取格式化时间</div><div class=\"line\">var _getTime = function() &#123;</div><div class=\"line\">\tvar _ = [&apos;01&apos;,&apos;02&apos;,&apos;03&apos;,&apos;04&apos;,&apos;05&apos;,&apos;06&apos;,&apos;07&apos;,&apos;08&apos;,&apos;09&apos;], // 补零</div><div class=\"line\">\t\td = new Date(),</div><div class=\"line\">\t\th = d.getHours(),</div><div class=\"line\">\t\tm = d.getMinutes(),</div><div class=\"line\">\t\ts = d.getSeconds();</div><div class=\"line\">\treturn [ _[h]||h, _[m]||m, _[s]||s ].join(&apos;:&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第八式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">// navigator 代码检测应用</div><div class=\"line\">// First check if devtools is not installed</div><div class=\"line\">   if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === &apos;undefined&apos;) &#123;</div><div class=\"line\">     // If we&apos;re in Chrome or Firefox, provide a download link if not installed.</div><div class=\"line\">     if (navigator.userAgent.indexOf(&apos;Chrome&apos;) &gt; -1 &amp;&amp; navigator.userAgent.indexOf(&apos;Edge&apos;) === -1 || navigator.userAgent.indexOf(&apos;Firefox&apos;) &gt; -1) &#123;</div><div class=\"line\">       // Firefox does not have the issue with devtools loaded over file://</div><div class=\"line\">       var showFileUrlMessage = window.location.protocol.indexOf(&apos;http&apos;) === -1 &amp;&amp; navigator.userAgent.indexOf(&apos;Firefox&apos;) === -1;</div><div class=\"line\">       console.debug(&apos;Download the React DevTools &apos; + (showFileUrlMessage ? &apos;and use an HTTP server (instead of a file: URL) &apos; : &apos;&apos;) + &apos;for a better development experience: &apos; + &apos;https://fb.me/react-devtools&apos;);</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第九式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 浏览器的事件处理兼容处理</div><div class=\"line\"></div><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\"></div><div class=\"line\">\t// 添加事件处理</div><div class=\"line\">\taddEventer: function(element, type, handler) &#123;</div><div class=\"line\">\t\tif(element.addEventListener) &#123;</div><div class=\"line\">\t\t\telement.addEventListener(type, handler, false);</div><div class=\"line\">\t\t&#125; else if(element.attachEvent) &#123;</div><div class=\"line\">\t\t\telement.attachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\telement[&apos;on&apos; + type] = handler;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t</div><div class=\"line\">\t// 移除事件处理</div><div class=\"line\">\tremoveEventer: function(element, type, hanlder) &#123;</div><div class=\"line\">\t\tif(element.removeEventListener) &#123;</div><div class=\"line\">\t\t\telement.removeEventListener(type, handler, false);</div><div class=\"line\">\t\t&#125; else if(element.detachEvent) &#123;</div><div class=\"line\">\t\t\telement.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\telement[&apos;on&apos; + type] = null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>第十式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\">// JS原生宽、高度</div><div class=\"line\"></div><div class=\"line\">// 窗口大小（IE9+）</div><div class=\"line\">window.innerHeight(当前可视页面的大小)</div><div class=\"line\">window.innerWidth</div><div class=\"line\">window.outerHeight</div><div class=\"line\">window.outerWidth</div><div class=\"line\">resizeTo()</div><div class=\"line\">resizeBy()</div><div class=\"line\"></div><div class=\"line\">// 窗口位置</div><div class=\"line\">screenLeft</div><div class=\"line\">screenTop</div><div class=\"line\">screenX(opera)</div><div class=\"line\">screenY(opera)</div><div class=\"line\">moveTo()</div><div class=\"line\">moveBy()</div><div class=\"line\"></div><div class=\"line\">// 屏幕信息</div><div class=\"line\">screen.height(屏幕的高度，跟电脑本身相关)</div><div class=\"line\">screen.width(屏幕的宽度)</div><div class=\"line\">screen.avilHeight</div><div class=\"line\">screen.avilWidth</div><div class=\"line\"></div><div class=\"line\">// body元素的client(可视部分宽度和高度，padding＋content)</div><div class=\"line\">document.body.clientHeight(当然，body可改成页面中其他任何元素)</div><div class=\"line\">document.body.clientWidth</div><div class=\"line\">document.body.clientTop</div><div class=\"line\">document.body.clientLeft</div><div class=\"line\"></div><div class=\"line\">// body元素的offset(border＋padding＋content)</div><div class=\"line\">document.body.offsetWidth</div><div class=\"line\">document.body.offsetHeight</div><div class=\"line\">document.body.offsetLeft</div><div class=\"line\">document.body.offsetTop</div><div class=\"line\"></div><div class=\"line\">// body元素的scroll</div><div class=\"line\">document.body.scrollWidth</div><div class=\"line\">document.body.scrollHeight</div><div class=\"line\">document.body.scrollTop</div><div class=\"line\">document.body.scrollLeft</div><div class=\"line\">scrollTo()</div><div class=\"line\">scrollBy()</div><div class=\"line\"></div><div class=\"line\">// 综合比较 document.body </div><div class=\"line\"></div><div class=\"line\">clientHeight </div><div class=\"line\">\t大家对 clientHeight 都没有什么异议，都认为是内容可视区域的高度</div><div class=\"line\"></div><div class=\"line\">offsetHeight </div><div class=\"line\">\tIE、Opera 认为 offsetHeight = clientHeight + 滚动条 + 边框。 NS、FF 认为 offsetHeight 是网页内容实际高度，可以小于 clientHeight。 </div><div class=\"line\"></div><div class=\"line\">scrollHeight </div><div class=\"line\">\tIE、Opera 认为 scrollHeight 是网页内容实际高度，可以小于 clientHeight。 NS、FF 认为 scrollHeight 是网页内容高度，不过最小值是 clientHeight </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 获取浏览器窗口（视口）innerWidth和innerHeight的兼容性写法</div><div class=\"line\"></div><div class=\"line\">function getInnerWH() &#123;</div><div class=\"line\"></div><div class=\"line\">\tvar pageWidth = window.innerWidth;</div><div class=\"line\">\tvar pageHeight = window.innerHeight;</div><div class=\"line\"></div><div class=\"line\">\tif(typeof pageWidth != &apos;number&apos;) &#123;</div><div class=\"line\">\t\tif(document.compatMode == &apos;CSS1Compat&apos;) &#123;</div><div class=\"line\">\t\t\tpageWidth = document.documentElement.clientWidth;</div><div class=\"line\">\t\t\tpageHeight = document.documentElement.clientHeight;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tpageWidth = document.body.clientWidth;</div><div class=\"line\">\t\t\tpageHeight = document.body.clientHeight;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\treturn [pageWidth, pageHeight];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function scrollBottomOrTop() &#123;</div><div class=\"line\">\tvar viewportHeight = getInnerWH()[1];</div><div class=\"line\">\tvar scrollTop = document.body.scrollTop;</div><div class=\"line\">\tvar wholeHeight = document.body.scrollHeight;</div><div class=\"line\">\tif(viewportHeight + scrollTop &gt;= wholeHeight) &#123;</div><div class=\"line\">\t\talert(&apos;bottom&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif(scrollTop == 0) &#123;</div><div class=\"line\">\t\talert(&apos;top&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">window.onscroll = scrollBottomOrTop;</div><div class=\"line\"></div><div class=\"line\">// 相关技术：可视区加载，延迟加载（懒加载）</div></pre></td></tr></table></figure>\n<p>图示<br><img src=\"/2016/07/18/前端九剑/width.png\" alt=\"width.png\" title=\"\"></p>\n<ul>\n<li><p>第十一式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">// 触屏事件</div><div class=\"line\">function loadTouchEvent ()&#123;</div><div class=\"line\"></div><div class=\"line\">      document.addEventListener(&apos;touchstart&apos;,touch,false);</div><div class=\"line\">      document.addEventListener(&apos;touchmove&apos;,touch,false);</div><div class=\"line\">      document.addEventListener(&apos;touchend&apos;,touch,false);</div><div class=\"line\"></div><div class=\"line\">      function touch (event)&#123;</div><div class=\"line\">          event = event || window.event;</div><div class=\"line\"></div><div class=\"line\">          var oInp = document.getElementById(&quot;inp&quot;);</div><div class=\"line\"></div><div class=\"line\">          switch(event.type)&#123;</div><div class=\"line\">              case &quot;touchstart&quot;:</div><div class=\"line\">                  oInp.innerHTML =&quot;Touch started (&quot; + event.touches[0].clientX +&quot;,&quot; + event.touches[0].clientY +&quot;)&quot;;</div><div class=\"line\">                  break;</div><div class=\"line\">              case &quot;touchend&quot;:</div><div class=\"line\">                  oInp.innerHTML =&quot;&lt;br&gt;Touch end (&quot; + event.changedTouches[0].clientX +&quot;,&quot; + event.changedTouches[0].clientY +&quot;)&quot;;</div><div class=\"line\">                  break;</div><div class=\"line\">              case &quot;touchmove&quot;:</div><div class=\"line\">                  event.preventDefault();</div><div class=\"line\">                  oInp.innerHTML =&quot;&lt;br&gt;Touch moved (&quot; + event.touches[0].clientX +&quot;,&quot; + event.touches[0].clientY +&quot;)&quot;;</div><div class=\"line\">                  break;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  window.addEventListener(&apos;load&apos;,loadTouchEvent,false);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>第十二式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 封装CSS类的操作</div><div class=\"line\"></div><div class=\"line\">H5为每个元素定义了classList属性，该属性值是DOMTokenList对象，一个类数组对象。</div><div class=\"line\">这个对象还定义了如下的方法：</div><div class=\"line\">1、add(value)，将给定的字符串值添加到class列表中，如果存在，则忽略。</div><div class=\"line\">2、containes(value)，表示class列表中是否存在给定的值，如果存在则返回true，否则返回false。</div><div class=\"line\">3、remove(value)，从class列表中删除给定的字符串。</div><div class=\"line\">4、toggle(value)，如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它。</div><div class=\"line\">但是，IE8不支持classList属性，IE9+部分支持，简直毒瘤。</div><div class=\"line\"></div><div class=\"line\">// 兼容写法</div></pre></td></tr></table></figure>\n<p>classList的兼容情况</p>\n<img src=\"/2016/07/18/前端九剑/classList.png\" alt=\"classList.png\" title=\"\">\n</li>\n<li><p>第十三式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取元素的指定样式，getComputedStyle(element,null)在IE8或更早的版本没有实现，只能使用currentStyle属性。</div><div class=\"line\"></div><div class=\"line\">\t\t/* * *</div><div class=\"line\">           * 获取元素的指定样式</div><div class=\"line\">           * @param obj element</div><div class=\"line\">           * @param attr string</div><div class=\"line\">           * @returns &#123;*&#125; string</div><div class=\"line\">           */</div><div class=\"line\"></div><div class=\"line\">          function getStyle(obj,attr) &#123;</div><div class=\"line\"></div><div class=\"line\">              // IE</div><div class=\"line\">              if(obj.currentStyle) &#123;</div><div class=\"line\">                  return obj.currentStyle[attr];</div><div class=\"line\">              &#125; else &#123;</div><div class=\"line\">                  return getComputedStyle(obj,null)[attr];</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>第十四式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n</ul>\n","categories":["前端"],"tags":[]},{"title":"梦入前端","url":"http://yoursite.com/2016/03/12/first/","content":"<h2 id=\"一如前端深似海，从此繁华是故人\"><a href=\"#一如前端深似海，从此繁华是故人\" class=\"headerlink\" title=\"一如前端深似海，从此繁华是故人\"></a>一如前端深似海，从此繁华是故人</h2><hr>\n<img src=\"/2016/03/12/first/beatifullife.jpg\" alt=\"[title]\" title=\"[title]\">\n<h2 id=\"重剑无锋，大巧不工\"><a href=\"#重剑无锋，大巧不工\" class=\"headerlink\" title=\"重剑无锋，大巧不工\"></a>重剑无锋，大巧不工</h2><h3 id=\"WebStorm-less\"><a href=\"#WebStorm-less\" class=\"headerlink\" title=\"WebStorm-less\"></a>WebStorm-less</h3><hr>\n<ul>\n<li><code>npm install -g node-sass</code> 全局安装node－sass</li>\n<li><code>which node-sass</code> 查看命令路径</li>\n<li>file-&gt;setting-&gt;tools-&gt;file watchers</li>\n</ul>\n<img src=\"/2016/03/12/first/sass.png\" alt=\"[less]\" title=\"[less]\">\n<ul>\n<li>主要配置<code>Program</code>和<code>Output paths to refresh</code>两项，指定确定的目录即可。</li>\n<li>如果懂 <code>node－sass</code> 命令参数，那么只要填写 <code>Arguments</code></li>\n<li>Arguments: <code>$FileNameWithoutAllExtensions$.scss $ProjectFileDir$/public/css/$FileNameWithoutExtension$.css</code></li>\n<li>空格之前是当前的文件 <code>xxx.scss</code>，空格之后是编译输出的目录加文件 <code>**/xxx.css</code></li>\n</ul>\n","categories":["前端"],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"\n\n/**\n * index home\n */\n\n.content-home {\n    position: absolute;\n    top: 50%;\n    width: 100%;\n    height: 100%;\n    height: 300px;\n    margin-top: -150px;\n    margin-bottom: 100px;\n    right: 400px;\n    opacity: 0;\n}\n\n.content-home .nav .item a:hover {\n    color: #9E9E9E;\n}\n\n/**\n * archives\n */\n\n.item-title.item-title-1:before {\n    background: #2fd20e;\n}\n\n.item-post .post-title {\n    font-size: 16px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: rgba(4, 4, 4, 0.57);\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n\n.item-post .post-title:hover {\n    color: rgb(0, 0, 0);\n}\n\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    width: 40px;\n}\n\n/**\n * about.ejs\n */\n.content.content-about .dot.dot-0 {\n    background: #000000;\n}\n\n.content.content-about .dot.dot-1 {\n    background: #000000;\n}\n\n.content.content-about .dot.dot-2 {\n    background: #000000;\n}\n\n.content.content-about .dot.dot-3 {\n    background: #000000;\n}\n\n\n.content.content-about .dot.dot-4 {\n    background: #000000;\n}\n\n.content.content-about .dot.icon {\n    font-size: 12px;\n    line-height: 20px;\n    width: 20px;\n    height: 20px;\n    margin-top: -10px;\n    margin-left: -10px;\n    padding-left: 2px;\n    color: rgb(255, 255, 255);\n}\n\n.content.content-about a.text-value-url {\n    color: #9E9E9E;\n}\n\n.content.content-about a.text-value-url:hover {\n    color: #12cc72;\n}\n\n\n/**\n * article\n */\n\n.box-prev-next {\n    margin-top: 0px;\n    margin-bottom: 70px;\n}\n\n.box-prev-next a {\n    text-align: center;\n    line-height: 34px;\n    width: 36px;\n    height: 36px;\n    border-radius: 20%;\n    border: 1px solid #dfdfdf;\n    transition: all .5s ease;\n}\n\n.box-prev-next a:hover {\n    border-radius: 50%;\n    cursor: pointer;\n    background: #f3f2f2;\n}\n\na.back-top {\n    position: fixed;\n    bottom: 40px;\n    right: 80px;\n    background: #f0f0f0;\n    height: 40px;\n    width: 40px;\n    border-radius: 50%;\n    line-height: 36px;\n    text-align: center;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    transition-propety: background-color;\n    display: none;\n}\n\n\n\n\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]